/*
 * Copyright (c) 2020 The ZMK Contributors
 * SPDX-License-Identifier: MIT
 * 
 * TOTEM KEYBOARD - Final Configuration
 * Base: Your Colemak-DH layout
 * Optimized for: Coding, Cybersecurity, Penetration Testing, CTF, Python, JavaScript
 */

#include <behaviors.dtsi>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/outputs.h>

// Layer definitions
#define BASE 0
#define HACK 1
#define TERM 2
#define TOOL 3

// Totem 38-key positions
#define KEYS_L  0 1 2 3 4 5 12 13 14 15 16 17 24 25 26 27 28 29
#define KEYS_R  6 7 8 9 10 11 18 19 20 21 22 23 30 31 32 33 34 35
#define THUMBS 36 37 38 39

/ {
    behaviors {
        // Timeless home-row mods (urob's method)
        hml: homerow_mod_left {
            compatible = "zmk,behavior-hold-tap";
            #binding-cells = <2>;
            flavor = "balanced";
            tapping-term-ms = <280>;
            quick-tap-ms = <175>;
            require-prior-idle-ms = <150>;
            bindings = <&kp>, <&kp>;
            hold-trigger-key-positions = <KEYS_R THUMBS>;
            hold-trigger-on-release;
        };

        hmr: homerow_mod_right {
            compatible = "zmk,behavior-hold-tap";
            #binding-cells = <2>;
            flavor = "balanced";
            tapping-term-ms = <280>;
            quick-tap-ms = <175>;
            require-prior-idle-ms = <150>;
            bindings = <&kp>, <&kp>;
            hold-trigger-key-positions = <KEYS_L THUMBS>;
            hold-trigger-on-release;
        };
    };

    combos {
        compatible = "zmk,combos";

        // Brackets with cursor positioning
        combo_parens {
            timeout-ms = <50>;
            key-positions = <19 20>; // N+E → ()
            bindings = <&macro_parens>;
            require-prior-idle-ms = <150>;
        };
        combo_brackets {
            timeout-ms = <50>;
            key-positions = <20 21>; // E+I → []
            bindings = <&macro_brackets>;
            require-prior-idle-ms = <150>;
        };
        combo_braces {
            timeout-ms = <50>;
            key-positions = <21 22>; // I+O → {}
            bindings = <&macro_braces>;
            require-prior-idle-ms = <150>;
        };

        // Most frequent symbols
        combo_semicolon {
            timeout-ms = <50>;
            key-positions = <8 9>; // U+Y → ;
            bindings = <&kp SEMI>;
            require-prior-idle-ms = <150>;
        };
        combo_colon {
            timeout-ms = <50>;
            key-positions = <7 8>; // L+U → :
            bindings = <&kp COLON>;
            require-prior-idle-ms = <150>;
        };
        combo_equal {
            timeout-ms = <50>;
            key-positions = <6 7>; // J+L → =
            bindings = <&kp EQUAL>;
            require-prior-idle-ms = <150>;
        };
        combo_underscore {
            timeout-ms = <50>;
            key-positions = <28 29>; // V+B → _
            bindings = <&kp UNDER>;
            require-prior-idle-ms = <150>;
        };
        combo_minus {
            timeout-ms = <50>;
            key-positions = <27 28>; // C+V → -
            bindings = <&kp MINUS>;
            require-prior-idle-ms = <150>;
        };
        combo_plus {
            timeout-ms = <50>;
            key-positions = <31 32>; // M+, → +
            bindings = <&kp PLUS>;
            require-prior-idle-ms = <150>;
        };

        // Python essentials
        combo_dunder {
            timeout-ms = <50>;
            key-positions = <26 27>; // X+C → __
            bindings = <&macro_dunder>;
            require-prior-idle-ms = <150>;
        };
        combo_arrow_func {
            timeout-ms = <50>;
            key-positions = <33 34>; // .+/ → =>
            bindings = <&macro_arrow>;
            require-prior-idle-ms = <150>;
        };
        combo_not_equal {
            timeout-ms = <50>;
            key-positions = <2 3>; // W+F → !=
            bindings = <&macro_not_eq>;
            require-prior-idle-ms = <150>;
        };

        // Vim essentials
        combo_esc {
            timeout-ms = <50>;
            key-positions = <14 15>; // R+S → ESC
            bindings = <&kp ESC>;
            require-prior-idle-ms = <150>;
        };
        combo_tab {
            timeout-ms = <50>;
            key-positions = <15 16>; // S+T → TAB
            bindings = <&kp TAB>;
            require-prior-idle-ms = <150>;
        };

        // Copy/Paste
        combo_copy {
            timeout-ms = <50>;
            key-positions = <26 30>; // X+K → Ctrl+C
            bindings = <&kp LC(C)>;
            require-prior-idle-ms = <150>;
        };
        combo_paste {
            timeout-ms = <50>;
            key-positions = <28 30>; // V+K → Ctrl+V
            bindings = <&kp LC(V)>;
            require-prior-idle-ms = <150>;
        };

        // Caps word for CONSTANTS
        combo_caps_word {
            timeout-ms = <50>;
            key-positions = <16 19>; // T+H → CAPS_WORD
            bindings = <&caps_word>;
        };

        // Cybersecurity shortcuts
        combo_pipe {
            timeout-ms = <50>;
            key-positions = <18 19>; // H+N → |
            bindings = <&kp PIPE>;
            require-prior-idle-ms = <150>;
        };
        combo_sudo {
            timeout-ms = <50>;
            key-positions = <6 7>; // J+L → sudo 
            bindings = <&macro_sudo>;
            require-prior-idle-ms = <150>;
        };
    };

    macros {
        // Bracket pairs with cursor inside
        macro_parens: macro_parens {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp LPAR &kp RPAR &kp LEFT>;
        };
        macro_brackets: macro_brackets {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp LBKT &kp RBKT &kp LEFT>;
        };
        macro_braces: macro_braces {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp LBRC &kp RBRC &kp LEFT>;
        };

        // Python essentials
        macro_dunder: macro_dunder {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp UNDER &kp UNDER>;
        };
        macro_arrow: macro_arrow {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp EQUAL &kp GT>;
        };
        macro_not_eq: macro_not_eq {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp EXCL &kp EQUAL>;
        };

        // Cybersecurity commands
        macro_sudo: macro_sudo {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp S &kp U &kp D &kp O &kp SPACE>;
        };
        macro_nmap: macro_nmap {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp N &kp M &kp A &kp P &kp SPACE &kp MINUS &kp S &kp S &kp SPACE>;
        };
        macro_netcat: macro_netcat {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp N &kp C &kp SPACE &kp MINUS &kp L &kp V &kp N &kp P &kp SPACE>;
        };
    };

    keymap {
        compatible = "zmk,keymap";

        // ============================================================
        // LAYER 0: BASE - Your Colemak-DH with BSPC/DEL on thumbs
        // ============================================================
        base_layer {
            bindings = <
           &kp Q  &kp W           &kp F        &kp P        &kp G             &kp J                &kp L            &kp U          &kp Y            &kp SEMI
           &kp A  &mt LEFT_ALT R  &mt LCTRL S  &mt LSHFT T  &mt LEFT_GUI D    &mt RIGHT_COMMAND H  &mt RSHFT N      &mt RCTRL E    &mt RIGHT_ALT I  &kp O
&kp LCTRL  &kp Z  &kp X           &kp C        &kp V        &kp B             &kp K                &kp M            &kp COMMA      &kp DOT          &kp FSLH  &kp APOS
                                  &kp LGUI     &mo TERM     &mo HACK          &kp SPACE            &kp BSPC         &kp DEL
            >;
        };

        // ============================================================
        // LAYER 1: HACK - Symbols for coding & pentesting
        // ============================================================
        hacking_layer {
            bindings = <
           &kp EXCL  &kp AT     &kp HASH   &kp DLLR   &kp PRCNT         &kp CARET  &kp AMPS   &kp STAR   &kp LPAR   &kp RPAR
           &kp PIPE  &kp SQT    &kp DQT    &kp UNDER  &kp MINUS         &kp EQUAL  &kp LBKT   &kp RBKT   &kp LBRC   &kp RBRC
&trans     &kp GRAVE &kp TILDE  &kp LT     &kp GT     &kp PLUS          &kp BSLH   &kp FSLH   &kp QMARK  &kp COLON  &kp SEMI  &trans
                                &trans     &trans                       &kp RET    &trans
            >;
        };

        // ============================================================
        // LAYER 2: TERM - Numbers, navigation, terminal shortcuts
        // ============================================================
        terminal_layer {
            bindings = <
           &kp N1      &kp N2      &kp N3        &kp N4        &kp N5            &kp N6        &kp N7      &kp N8      &kp N9      &kp N0
           &kp LEFT    &kp DOWN    &kp UP        &kp RIGHT     &kp HOME          &kp END       &kp LC(A)   &kp LC(E)   &kp LC(K)   &kp LC(U)
&trans     &kp PG_UP   &kp PG_DN   &kp LC(LEFT)  &kp LC(RIGHT) &kp LC(HOME)      &kp LC(END)   &kp LC(W)   &kp LC(D)   &kp LC(C)   &kp LC(R)  &kp LC(L)
                                   &kp N0        &trans                          &kp RET       &trans
            >;
        };

        // ============================================================
        // LAYER 3: TOOL - Function keys, Bluetooth, system controls
        // ============================================================
        tools_layer {
            bindings = <
           &kp F1          &kp F2          &kp F3          &kp F4          &kp F5              &kp F6          &kp F7          &kp F8          &kp F9          &kp F10
           &kp LC(LS(T))   &kp LC(LS(I))   &kp LC(LS(R))   &kp LC(LS(P))   &kp LC(LS(S))       &kp LC(R)       &kp LC(I)       &kp LC(H)       &kp LC(G)       &kp F11
&trans     &bt BT_SEL 0    &bt BT_SEL 1    &bt BT_SEL 2    &bt BT_CLR      &out OUT_USB        &sys_reset      &kp C_BRI_DN    &kp C_BRI_UP    &kp C_VOL_DN    &kp C_VOL_UP  &kp F12
                                           &trans          &trans                              &bootloader     &trans
            >;
        };
    };

    conditional_layers {
        compatible = "zmk,conditional-layers";
        
        // Activate TOOL layer when both HACK and TERM are pressed
        tri_layer {
            if-layers = <HACK TERM>;
            then-layer = <TOOL>;
        };
    };
};
