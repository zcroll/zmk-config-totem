#include <behaviors.dtsi>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/keys.h>

// Key positions for your 38-key Totem
#define KEYS_L  0  1  2  3  4  5 12 13 14 15 16 17 24 25 26 27 28 29
#define KEYS_R  6  7  8  9 10 11 18 19 20 21 22 23 30 31 32 33 34 35
#define THUMBS 36 37 38 39

/ {
    behaviors {
        // UROB'S TIMELESS HOMEROW MODS - Adapted for your layout
        hml: homerow_mod_left {
            compatible = "zmk,behavior-hold-tap";
            #binding-cells = <2>;
            flavor = "balanced";
            tapping-term-ms = <280>;
            quick-tap-ms = <175>;
            require-prior-idle-ms = <150>;
            bindings = <&kp>, <&kp>;
            hold-trigger-key-positions = <KEYS_R THUMBS>;
            hold-trigger-on-release;
        };

        hmr: homerow_mod_right {
            compatible = "zmk,behavior-hold-tap";
            #binding-cells = <2>;
            flavor = "balanced";
            tapping-term-ms = <280>;
            quick-tap-ms = <175>;
            require-prior-idle-ms = <150>;
            bindings = <&kp>, <&kp>;
            hold-trigger-key-positions = <KEYS_L THUMBS>;
            hold-trigger-on-release;
        };

        // SMART THUMB - Multi-purpose like urob's magic thumb
        smart_thumb: smart_thumb_tap {
            compatible = "zmk,behavior-hold-tap";
            #binding-cells = <2>;
            flavor = "tap-preferred";
            tapping-term-ms = <200>;
            quick-tap-ms = <125>;
            bindings = <&mo>, <&smart_space>;
        };

        // MAGIC SPACE - Repeat after letters, space otherwise
        smart_space: smart_space_repeat {
            compatible = "zmk,behavior-mod-morph";
            #binding-cells = <0>;
            bindings = <&kp SPACE>, <&key_repeat>;
            mods = <(MOD_LSFT|MOD_RSFT)>;
            keep-mods = <(MOD_RSFT)>;
        };

        // MAGIC SHIFT - Sticky shift, caps word on double tap
        magic_shift: magic_shift_caps {
            compatible = "zmk,behavior-mod-morph";
            #binding-cells = <0>;
            bindings = <&sk LSHFT>, <&caps_word>;
            mods = <(MOD_LSFT)>;
        };
    };

    combos {
        compatible = "zmk,combos";
        
        // PROGRAMMING SYMBOLS - Most frequent, easiest reach
        combo_semicolon {
            timeout-ms = <50>;
            key-positions = <9 10>;  // Y+SEMI (natural flow)
            bindings = <&kp SEMI>;
            require-prior-idle-ms = <150>;
        };
        
        combo_colon {
            timeout-ms = <50>;
            key-positions = <8 9>;   // U+Y
            bindings = <&kp COLON>;
            require-prior-idle-ms = <150>;
        };

        // BRACKETS - Urob's style, horizontal combos
        combo_parens {
            timeout-ms = <50>;
            key-positions = <19 20>; // N+E (home row, comfortable)
            bindings = <&bracket_pair LPAR RPAR>;
            require-prior-idle-ms = <150>;
        };
        
        combo_brackets {
            timeout-ms = <50>;
            key-positions = <20 21>; // E+I
            bindings = <&bracket_pair LBKT RBKT>;
            require-prior-idle-ms = <150>;
        };
        
        combo_braces {
            timeout-ms = <50>;
            key-positions = <21 22>; // I+O
            bindings = <&bracket_pair LBRC RBRC>;
            require-prior-idle-ms = <150>;
        };

        // COMMON PROGRAMMING SYMBOLS - Top row combos like urob
        combo_excl {
            timeout-ms = <50>;
            key-positions = <1 2>;   // W+F
            bindings = <&kp EXCL>;
            require-prior-idle-ms = <150>;
        };

        combo_at {
            timeout-ms = <50>;
            key-positions = <2 3>;   // F+P
            bindings = <&kp AT>;
            require-prior-idle-ms = <150>;
        };

        combo_hash {
            timeout-ms = <50>;
            key-positions = <3 4>;   // P+G
            bindings = <&kp HASH>;
            require-prior-idle-ms = <150>;
        };

        combo_equal {
            timeout-ms = <50>;
            key-positions = <6 7>;   // J+L
            bindings = <&kp EQUAL>;
            require-prior-idle-ms = <150>;
        };

        combo_minus {
            timeout-ms = <50>;
            key-positions = <7 8>;   // L+U  
            bindings = <&kp MINUS>;
            require-prior-idle-ms = <150>;
        };

        // BOTTOM ROW - Symmetric to top like urob
        combo_under {
            timeout-ms = <50>;
            key-positions = <26 27>; // C+V
            bindings = <&kp UNDER>;
            require-prior-idle-ms = <150>;
        };

        combo_plus {
            timeout-ms = <50>;
            key-positions = <27 28>; // V+B  
            bindings = <&kp PLUS>;
            require-prior-idle-ms = <150>;
        };

        // PYTHON DOUBLE UNDERSCORE
        combo_dunder {
            timeout-ms = <50>;
            key-positions = <25 26>; // X+C
            bindings = <&double_under>;
            require-prior-idle-ms = <150>;
        };

        // QUICK ESC for Vim
        combo_esc {
            timeout-ms = <50>;
            key-positions = <13 14>; // R+S
            bindings = <&kp ESC>;
            require-prior-idle-ms = <150>;
        };

        // TAB for completion
        combo_tab {
            timeout-ms = <50>;
            key-positions = <14 15>; // S+T
            bindings = <&kp TAB>;
            require-prior-idle-ms = <150>;
        };

        // DELETE WORD - like urob's navigation shortcuts
        combo_del_word {
            timeout-ms = <50>;
            key-positions = <32 33>; // H+comma
            bindings = <&kp LC(BSPC)>;
            require-prior-idle-ms = <150>;
        };
    };

    macros {
        // BRACKET PAIR with cursor positioning
        bracket_pair: bracket_pair {
            compatible = "zmk,behavior-macro-two-param";
            #binding-cells = <2>;
            bindings = <&macro_param_1to1>, <&kp MACRO_PLACEHOLDER>,
                       <&macro_param_2to1>, <&kp MACRO_PLACEHOLDER>,
                       <&kp LEFT>;
        };

        // PYTHON DOUBLE UNDERSCORE
        double_under: double_under {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp UNDER &kp UNDER>;
        };

        // ARROW FUNCTION =>
        arrow_func: arrow_func {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp EQUAL &kp GT>;
        };

        // NOT EQUALS !=
        not_equal: not_equal {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp EXCL &kp EQUAL>;
        };
    };

    keymap {
        compatible = "zmk,keymap";

        // LAYER 0: BASE - Your original with timeless HRMs
        base {
            bindings = <
           &kp Q  &kp W            &kp F         &kp P         &kp G             &kp J                 &kp L            &kp U          &kp Y             &kp SEMI
           &kp A  &hml LEFT_ALT R  &hml LCTRL S  &hml LSHFT T  &hml LEFT_GUI D   &hmr RIGHT_COMMAND H  &hmr RSHFT N     &hmr RCTRL E   &hmr RIGHT_ALT I  &kp O
&kp LCTRL  &kp Z  &kp X            &kp C         &kp V         &kp B             &kp K                 &kp M            &kp COMMA      &kp DOT           &kp FSLH  &kp APOS
                                   &kp LGUI      &smart_thumb 2 0  &kp BSPC        &mo 1                 &magic_shift     &kp RIGHT_ALT
            >;
        };

        // LAYER 1: SYMBOLS - Daily coding symbols, easy reach
        nav_num {
            bindings = <
                   &kp EXCL        &kp AT         &kp HASH      &kp DLLR      &kp PRCNT         &kp CARET    &kp AMPS         &kp STAR     &kp LPAR   &kp RPAR
                   &kp COLON       &kp SQT        &kp DQT       &kp UNDER     &kp MINUS         &kp EQUAL    &kp LBKT         &kp RBKT     &kp LBRC   &kp RBRC
&kp ESC            &kp GRAVE       &kp TILDE      &kp LT        &kp GT        &kp PLUS          &kp BSLH     &kp FSLH         &kp QMARK    &kp DOT    &kp COMMA   &trans
                                                  &trans        &kp SPACE     &kp DEL           &trans       &kp RIGHT_SHIFT  &trans
            >;
        };

        // LAYER 2: NUMBERS - Urob-style smart layer with navigation  
        sym_func {
            bindings = <
           &kp N1         &kp N2        &kp N3         &kp N4        &kp N5            &kp N6   &kp N7           &kp N8   &kp N9   &kp N0
           &kp LEFT       &kp DOWN      &kp UP         &kp RIGHT     &kp HOME          &kp END  &kp N4           &kp N5   &kp N6   &kp MINUS
&trans     &kp PG_UP      &kp PG_DN     &kp LC(LEFT)   &kp LC(RIGHT) &kp LC(HOME)      &kp PLUS &kp N1           &kp N2   &kp N3   &kp DOT     &kp EQUAL
                                        &trans         &trans        &trans            &kp N0   &kp RIGHT_SHIFT  &trans
            >;
        };

        // LAYER 3: SYSTEM - Keep your existing functionality
        device {
            bindings = <
       &none       &kp C_BRIGHTNESS_DEC  &kp C_BRIGHTNESS_INC  &none             &none    &bt BT_SEL 0  &bt BT_SEL 1  &bt BT_SEL 2  &bt BT_SEL 3  &bt BT_SEL 4
       &kp K_MUTE  &kp C_VOLUME_DOWN     &kp C_VOLUME_UP       &kp C_PLAY_PAUSE  &none    &none         &none         &none         &none         &none
&none  &none       &none                 &none                 &none             &none    &none         &none         &none         &none         &none         &bt BT_CLR
                                         &none                 &none             &none    &none         &none         &none
            >;
        };

        extra1 { status = "reserved"; };
        extra2 { status = "reserved"; };
        extra3 { status = "reserved"; };
    };

    conditional_layers {
        compatible = "zmk,conditional-layers";

        device {
            if-layers = <1 2>;
            then-layer = <3>;
        };
    };
};
