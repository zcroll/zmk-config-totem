/*
 * TOTEM KEYBOARD - Enhanced with urob's Features
 * 38-key adaptation with timeless homerow mods and smart behaviors
 */

#include <behaviors.dtsi>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/outputs.h>

// Layer definitions
#define BASE 0
#define NAV  1
#define NUM  2
#define SYM  3
#define SYS  4

// Key position groups for Totem 38-key
#define KEYS_L 0 1 2 3 4 12 13 14 15 16 24 25 26 27 28
#define KEYS_R 5 6 7 8 9 17 18 19 20 21 29 30 31 32 33
#define THUMBS 34 35 36 37

// Timing constants
#define QUICK_TAP_MS 175
#define COMBO_TERM_FAST 25
#define COMBO_IDLE_FAST 150

/ {
    behaviors {
        // urob's "timeless" homerow mods - fixed shift issue
        hml: homerow_left {
            compatible = "zmk,behavior-hold-tap";
            label = "HOMEROW_LEFT";
            #binding-cells = <2>;
            flavor = "balanced";
            tapping-term-ms = <280>;
            quick-tap-ms = <QUICK_TAP_MS>;
            require-prior-idle-ms = <150>;
            bindings = <&kp>, <&kp>;
            hold-trigger-key-positions = <KEYS_R THUMBS>;
            hold-trigger-on-release;
        };

        hmr: homerow_right {
            compatible = "zmk,behavior-hold-tap";
            label = "HOMEROW_RIGHT";
            #binding-cells = <2>;
            flavor = "balanced";
            tapping-term-ms = <280>;
            quick-tap-ms = <QUICK_TAP_MS>;
            require-prior-idle-ms = <150>;
            bindings = <&kp>, <&kp>;
            hold-trigger-key-positions = <KEYS_L THUMBS>;
            hold-trigger-on-release;
        };

        // Magic shift behavior
        magic_shift: magic_shift {
            compatible = "zmk,behavior-hold-tap";
            label = "MAGIC_SHIFT";
            #binding-cells = <2>;
            flavor = "balanced";
            tapping-term-ms = <200>;
            quick-tap-ms = <QUICK_TAP_MS>;
            bindings = <&kp>, <&magic_shift_tap>;
        };

        magic_shift_tap: magic_shift_tap {
            compatible = "zmk,behavior-mod-morph";
            label = "MAGIC_SHIFT_TAP";
            #binding-cells = <0>;
            bindings = <&shift_repeat>, <&caps_word>;
            mods = <(MOD_LSFT)>;
        };

        shift_repeat: shift_repeat {
            compatible = "zmk,behavior-mod-morph";
            label = "SHIFT_REPEAT";
            #binding-cells = <0>;
            bindings = <&sk LSHFT>, <&key_repeat>;
            mods = <(MOD_LSFT)>;
        };

        // Smart layer behaviors
        lt_spc: layer_tap_space {
            compatible = "zmk,behavior-hold-tap";
            label = "LAYER_TAP_SPACE";
            #binding-cells = <2>;
            flavor = "balanced";
            tapping-term-ms = <200>;
            quick-tap-ms = <QUICK_TAP_MS>;
            bindings = <&mo>, <&spc_morph>;
        };

        spc_morph: space_morph {
            compatible = "zmk,behavior-mod-morph";
            label = "SPACE_MORPH";
            #binding-cells = <0>;
            bindings = <&kp SPACE>, <&dot_spc>;
            mods = <(MOD_LSFT)>;
        };

        // Smart punctuation
        comma_morph: comma_morph {
            compatible = "zmk,behavior-mod-morph";
            label = "COMMA_MORPH";
            #binding-cells = <0>;
            bindings = <&kp COMMA>, <&comma_inner>;
            mods = <(MOD_LSFT|MOD_RSFT)>;
        };

        comma_inner: comma_inner {
            compatible = "zmk,behavior-mod-morph";
            label = "COMMA_INNER";
            #binding-cells = <0>;
            bindings = <&kp SEMICOLON>, <&kp LESS_THAN>;
            mods = <(MOD_LCTL|MOD_RCTL)>;
        };

        dot_morph: dot_morph {
            compatible = "zmk,behavior-mod-morph";
            label = "DOT_MORPH";
            #binding-cells = <0>;
            bindings = <&kp DOT>, <&dot_inner>;
            mods = <(MOD_LSFT|MOD_RSFT)>;
        };

        dot_inner: dot_inner {
            compatible = "zmk,behavior-mod-morph";
            label = "DOT_INNER";
            #binding-cells = <0>;
            bindings = <&kp COLON>, <&kp GREATER_THAN>;
            mods = <(MOD_LCTL|MOD_RCTL)>;
        };

        qexcl: question_exclamation {
            compatible = "zmk,behavior-mod-morph";
            label = "QUESTION_EXCLAMATION";
            #binding-cells = <0>;
            bindings = <&kp QMARK>, <&kp EXCL>;
            mods = <(MOD_LSFT|MOD_RSFT)>;
        };

        // Navigation cluster with smart behaviors
        nav_bspc: nav_backspace {
            compatible = "zmk,behavior-mod-morph";
            label = "NAV_BACKSPACE";
            #binding-cells = <0>;
            bindings = <&kp BSPC>, <&kp LC(BSPC)>;
            mods = <(MOD_LCTL|MOD_RCTL)>;
        };

        nav_del: nav_delete {
            compatible = "zmk,behavior-mod-morph";
            label = "NAV_DELETE";
            #binding-cells = <0>;
            bindings = <&kp DEL>, <&kp LC(DEL)>;
            mods = <(MOD_LCTL|MOD_RCTL)>;
        };
    };

    macros {
        dot_spc: dot_space_shift {
            label = "DOT_SPACE_SHIFT";
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp DOT &kp SPACE &sk LSHFT>;
            wait-ms = <0>;
            tap-ms = <5>;
        };
    };

    combos {
        compatible = "zmk,combos";

        // Essential combos
        combo_esc {
            key-positions = <2 3>;  // F+P
            bindings = <&kp ESC>;
            timeout-ms = <COMBO_TERM_FAST>;
            require-prior-idle-ms = <COMBO_IDLE_FAST>;
        };

        combo_tab {
            key-positions = <13 14>; // S+T
            bindings = <&kp TAB>;
            timeout-ms = <COMBO_TERM_FAST>;
            require-prior-idle-ms = <COMBO_IDLE_FAST>;
        };

        combo_enter {
            key-positions = <19 20>; // E+I
            bindings = <&kp RET>;
            timeout-ms = <COMBO_TERM_FAST>;
            require-prior-idle-ms = <COMBO_IDLE_FAST>;
        };

        // Brackets - urob style
        combo_lpar {
            key-positions = <18 19>; // N+E
            bindings = <&kp LPAR>;
            timeout-ms = <COMBO_TERM_FAST>;
            require-prior-idle-ms = <COMBO_IDLE_FAST>;
        };

        combo_rpar {
            key-positions = <19 20>; // E+I
            bindings = <&kp RPAR>;
            timeout-ms = <COMBO_TERM_FAST>;
            require-prior-idle-ms = <COMBO_IDLE_FAST>;
        };

        combo_lbkt {
            key-positions = <30 31>; // M+COMMA
            bindings = <&kp LBKT>;
            timeout-ms = <COMBO_TERM_FAST>;
            require-prior-idle-ms = <COMBO_IDLE_FAST>;
        };

        combo_rbkt {
            key-positions = <31 32>; // COMMA+DOT
            bindings = <&kp RBKT>;
            timeout-ms = <COMBO_TERM_FAST>;
            require-prior-idle-ms = <COMBO_IDLE_FAST>;
        };

        combo_lbrc {
            key-positions = <29 30>; // K+M
            bindings = <&kp LBRC>;
            timeout-ms = <COMBO_TERM_FAST>;
            require-prior-idle-ms = <COMBO_IDLE_FAST>;
        };

        combo_rbrc {
            key-positions = <32 33>; // DOT+SLASH
            bindings = <&kp RBRC>;
            timeout-ms = <COMBO_TERM_FAST>;
            require-prior-idle-ms = <COMBO_IDLE_FAST>;
        };

        // Vertical symbol combos (urob pattern)
        combo_at {
            key-positions = <1 13>;  // W+R
            bindings = <&kp AT>;
            timeout-ms = <30>;
        };

        combo_hash {
            key-positions = <2 14>;  // F+S
            bindings = <&kp HASH>;
            timeout-ms = <30>;
        };

        combo_dllr {
            key-positions = <3 15>;  // P+T
            bindings = <&kp DLLR>;
            timeout-ms = <30>;
        };

        combo_prcnt {
            key-positions = <4 16>;  // G+D
            bindings = <&kp PRCNT>;
            timeout-ms = <30>;
        };

        combo_caret {
            key-positions = <5 17>;  // J+H
            bindings = <&kp CARET>;
            timeout-ms = <30>;
        };

        combo_amps {
            key-positions = <6 18>;  // L+N
            bindings = <&kp AMPS>;
            timeout-ms = <30>;
        };

        combo_star {
            key-positions = <7 19>;  // U+E
            bindings = <&kp STAR>;
            timeout-ms = <30>;
        };

        combo_plus {
            key-positions = <8 20>;  // Y+I
            bindings = <&kp PLUS>;
            timeout-ms = <30>;
        };

        // Bottom row vertical combos
        combo_grave {
            key-positions = <13 25>; // R+X
            bindings = <&kp GRAVE>;
            timeout-ms = <30>;
        };

        combo_bslh {
            key-positions = <14 26>; // S+C
            bindings = <&kp BSLH>;
            timeout-ms = <30>;
        };

        combo_equal {
            key-positions = <15 27>; // T+V
            bindings = <&kp EQUAL>;
            timeout-ms = <30>;
        };

        combo_tilde {
            key-positions = <16 28>; // D+B
            bindings = <&kp TILDE>;
            timeout-ms = <30>;
        };

        combo_under {
            key-positions = <17 29>; // H+K
            bindings = <&kp UNDER>;
            timeout-ms = <30>;
        };

        combo_minus {
            key-positions = <18 30>; // N+M
            bindings = <&kp MINUS>;
            timeout-ms = <30>;
        };

        combo_fslh {
            key-positions = <19 31>; // E+COMMA
            bindings = <&kp FSLH>;
            timeout-ms = <30>;
        };

        combo_pipe {
            key-positions = <20 32>; // I+DOT
            bindings = <&kp PIPE>;
            timeout-ms = <30>;
        };

        // Clipboard shortcuts
        combo_copy {
            key-positions = <25 27>; // X+V
            bindings = <&kp LC(C)>;
            timeout-ms = <COMBO_TERM_FAST>;
        };

        combo_paste {
            key-positions = <26 27>; // C+V
            bindings = <&kp LC(V)>;
            timeout-ms = <COMBO_TERM_FAST>;
        };

        combo_cut {
            key-positions = <25 26>; // X+C
            bindings = <&kp LC(X)>;
            timeout-ms = <COMBO_TERM_FAST>;
        };

        combo_undo {
            key-positions = <24 25>; // Z+X
            bindings = <&kp LC(Z)>;
            timeout-ms = <COMBO_TERM_FAST>;
        };

        combo_save {
            key-positions = <14 15>; // S+T
            bindings = <&kp LC(S)>;
            timeout-ms = <COMBO_TERM_FAST>;
        };
    };

    keymap {
        compatible = "zmk,keymap";

        base_layer {
            label = "BASE";
            bindings = <
         &kp Q         &kp W            &kp F         &kp P         &kp G              &kp J                 &kp L         &kp U         &kp Y             &kp SQT
         &kp A         &hml LALT R      &hml LCTRL S  &hml LSHFT T  &hml LGUI D        &hmr RGUI H           &hmr RSHFT N  &hmr RCTRL E  &hmr RALT I       &kp O
&kp ESC  &kp Z         &kp X            &kp C         &kp V         &kp B              &kp K                 &kp M         &comma_morph  &dot_morph        &qexcl  &kp APOS
                                        &lt_spc NAV 0 &lt NUM BSPC  &lt SYM RET        &magic_shift LSHFT 0
            >;
        };

        nav_layer {
            label = "NAV";
            bindings = <
        &kp LA(F4)    &trans           &kp LS(TAB)   &kp LA(TAB)   &trans             &kp PG_UP             &nav_bspc     &kp UP        &nav_del          &trans
        &sk LGUI      &sk LALT         &sk LCTRL     &sk LSHFT     &trans             &kp PG_DN             &kp LEFT      &kp DOWN      &kp RIGHT         &kp RET
&trans  &trans        &trans           &trans        &trans        &trans             &kp INS               &kp HOME      &trans        &kp END           &trans  &trans
                                       &trans        &trans        &trans             &kp K_CANCEL
            >;
        };

        num_layer {
            label = "NUM";
            bindings = <
        &trans        &kp N7           &kp N8        &kp N9        &trans             &trans                &trans        &trans        &trans            &trans
        &hml LGUI N0  &hml LALT N4     &hml LCTRL N5 &hml LSHFT N6 &trans             &trans                &trans        &trans        &trans            &trans
&trans  &trans        &kp N1           &kp N2        &kp N3        &trans             &trans                &trans        &trans        &trans            &trans  &trans
                                       &trans        &trans        &trans             &trans
            >;
        };

        sym_layer {
            label = "SYM";
            bindings = <
        &kp EXCL      &kp AT           &kp HASH      &kp DLLR      &kp PRCNT          &kp CARET             &kp AMPS      &kp STAR      &kp LPAR          &kp RPAR
        &kp GRAVE     &kp MINUS        &kp PLUS      &kp EQUAL     &kp COLON          &kp PIPE              &kp LBRC      &kp RBRC      &kp LBKT          &kp RBKT
&trans  &kp TILDE     &kp UNDER        &kp BSLH      &kp FSLH      &kp SEMI           &kp LT                &kp GT        &kp SQT       &kp DQT           &kp QMARK &trans
                                       &trans        &trans        &trans             &trans
            >;
        };

        sys_layer {
            label = "SYS";
            bindings = <
        &bt BT_SEL 0  &bt BT_SEL 1     &bt BT_SEL 2  &bt BT_SEL 3  &bt BT_CLR         &trans                &trans        &trans        &trans            &trans
        &kp F1        &kp F2           &kp F3        &kp F4        &kp F5             &kp F6                &kp F7        &kp F8        &kp F9            &kp F10
&trans  &trans        &trans           &trans        &bootloader   &sys_reset         &sys_reset            &bootloader   &trans        &kp F11           &kp F12 &trans
                                       &trans        &trans        &trans             &trans
            >;
        };
    };

    conditional_layers {
        compatible = "zmk,conditional-layers";
        tri_layer {
            if-layers = <NUM SYM>;
            then-layer = <SYS>;
        };
    };
};
