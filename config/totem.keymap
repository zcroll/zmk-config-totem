/*
 * Copyright (c) 2020 The ZMK Contributors
 * SPDX-License-Identifier: MIT
 * 
 * TOTEM KEYBOARD - Optimized for Comfort & Speed
 * Most used symbols on home row + easy-reach combos for coding
 */

#include <behaviors.dtsi>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/outputs.h>

#define BASE 0
#define NAV  1
#define SYM  2
#define NUM  3
#define FUN  4

#define KEYS_L 0 1 2 3 4 5 12 13 14 15 16 17 24 25 26 27 28 29
#define KEYS_R 6 7 8 9 10 11 18 19 20 21 22 23 30 31 32 33 34 35
#define THUMBS 36 37 38 39

/ {
    behaviors {
        hml: homerow_left {
            compatible = "zmk,behavior-hold-tap";
            #binding-cells = <2>;
            flavor = "balanced";
            tapping-term-ms = <280>;
            quick-tap-ms = <175>;
            require-prior-idle-ms = <150>;
            bindings = <&kp>, <&kp>;
            hold-trigger-key-positions = <KEYS_R THUMBS>;
            hold-trigger-on-release;
        };

        hmr: homerow_right {
            compatible = "zmk,behavior-hold-tap";
            #binding-cells = <2>;
            flavor = "balanced";
            tapping-term-ms = <280>;
            quick-tap-ms = <175>;
            require-prior-idle-ms = <150>;
            bindings = <&kp>, <&kp>;
            hold-trigger-key-positions = <KEYS_L THUMBS>;
            hold-trigger-on-release;
        };

        lt_nav: layer_tap_nav {
            compatible = "zmk,behavior-hold-tap";
            #binding-cells = <2>;
            flavor = "balanced";
            tapping-term-ms = <200>;
            quick-tap-ms = <150>;
            bindings = <&mo>, <&kp>;
        };

        lt_sym: layer_tap_sym {
            compatible = "zmk,behavior-hold-tap";
            #binding-cells = <2>;
            flavor = "balanced";
            tapping-term-ms = <200>;
            quick-tap-ms = <150>;
            bindings = <&mo>, <&kp>;
        };

        smart_shft: smart_shift {
            compatible = "zmk,behavior-mod-morph";
            #binding-cells = <0>;
            bindings = <&sk LSHFT>, <&caps_word>;
            mods = <(MOD_LSFT)>;
        };
    };

    combos {
        compatible = "zmk,combos";
        
        // ========== BRACKETS (with cursor inside) ==========
        combo_parens {
            timeout-ms = <50>;
            key-positions = <19 20>; // N+E → ()
            bindings = <&macro_parens>;
            require-prior-idle-ms = <150>;
        };
        
        combo_brackets {
            timeout-ms = <50>;
            key-positions = <20 21>; // E+I → []
            bindings = <&macro_brackets>;
            require-prior-idle-ms = <150>;
        };
        
        combo_braces {
            timeout-ms = <50>;
            key-positions = <21 22>; // I+O → {}
            bindings = <&macro_braces>;
            require-prior-idle-ms = <150>;
        };

        // ========== ESSENTIAL KEYS ==========
        combo_esc {
            timeout-ms = <50>;
            key-positions = <14 15>; // R+S → ESC (Vim exit)
            bindings = <&kp ESC>;
            require-prior-idle-ms = <150>;
        };

        combo_tab {
            timeout-ms = <50>;
            key-positions = <15 16>; // S+T → TAB (completion)
            bindings = <&kp TAB>;
            require-prior-idle-ms = <150>;
        };

        combo_ret {
            timeout-ms = <50>;
            key-positions = <16 17>; // T+D → ENTER (quick confirm)
            bindings = <&kp RET>;
            require-prior-idle-ms = <150>;
        };

        // ========== MOST USED SYMBOLS ==========
        combo_colon {
            timeout-ms = <50>;
            key-positions = <7 8>; // L+U → : (Python dicts, type hints)
            bindings = <&kp COLON>;
            require-prior-idle-ms = <150>;
        };

        combo_semicolon {
            timeout-ms = <50>;
            key-positions = <8 9>; // U+Y → ; (statement end)
            bindings = <&kp SEMI>;
            require-prior-idle-ms = <150>;
        };

        combo_equal {
            timeout-ms = <50>;
            key-positions = <6 7>; // J+L → = (assignment)
            bindings = <&kp EQUAL>;
            require-prior-idle-ms = <150>;
        };

        combo_underscore {
            timeout-ms = <50>;
            key-positions = <28 29>; // V+B → _ (snake_case)
            bindings = <&kp UNDER>;
            require-prior-idle-ms = <150>;
        };

        combo_minus {
            timeout-ms = <50>;
            key-positions = <27 28>; // C+V → -
            bindings = <&kp MINUS>;
            require-prior-idle-ms = <150>;
        };

        combo_plus {
            timeout-ms = <50>;
            key-positions = <31 32>; // M+, → +
            bindings = <&kp PLUS>;
            require-prior-idle-ms = <150>;
        };

        // ========== PROGRAMMING PATTERNS ==========
        combo_double_equal {
            timeout-ms = <50>;
            key-positions = <6 8>; // J+U → == (comparison)
            bindings = <&macro_double_equal>;
            require-prior-idle-ms = <150>;
        };

        combo_not_equal {
            timeout-ms = <50>;
            key-positions = <2 3>; // W+F → !=
            bindings = <&macro_not_equal>;
            require-prior-idle-ms = <150>;
        };

        combo_arrow_func {
            timeout-ms = <50>;
            key-positions = <33 34>; // .+/ → => (arrow function)
            bindings = <&macro_arrow>;
            require-prior-idle-ms = <150>;
        };

        combo_dunder {
            timeout-ms = <50>;
            key-positions = <26 27>; // X+C → __ (Python dunder)
            bindings = <&macro_dunder>;
            require-prior-idle-ms = <150>;
        };

        combo_pipe {
            timeout-ms = <50>;
            key-positions = <18 19>; // H+N → | (shell pipes)
            bindings = <&kp PIPE>;
            require-prior-idle-ms = <150>;
        };

        // ========== CLIPBOARD ==========
        combo_copy {
            timeout-ms = <50>;
            key-positions = <26 30>; // X+K → Ctrl+C
            bindings = <&kp LC(C)>;
            require-prior-idle-ms = <150>;
        };

        combo_paste {
            timeout-ms = <50>;
            key-positions = <28 30>; // V+K → Ctrl+V
            bindings = <&kp LC(V)>;
            require-prior-idle-ms = <150>;
        };

        combo_cut {
            timeout-ms = <50>;
            key-positions = <26 28>; // X+V → Ctrl+X
            bindings = <&kp LC(X)>;
            require-prior-idle-ms = <150>;
        };

        combo_undo {
            timeout-ms = <50>;
            key-positions = <25 26>; // Z+X → Ctrl+Z
            bindings = <&kp LC(Z)>;
            require-prior-idle-ms = <150>;
        };

        // ========== VIM SHORTCUTS ==========
        combo_vim_save {
            timeout-ms = <50>;
            key-positions = <14 16>; // R+T → :w (save)
            bindings = <&macro_vim_save>;
            require-prior-idle-ms = <150>;
        };

        combo_vim_quit {
            timeout-ms = <50>;
            key-positions = <1 2>; // Q+W → :q (quit)
            bindings = <&macro_vim_quit>;
            require-prior-idle-ms = <150>;
        };

        // ========== CAPS WORD ==========
        combo_caps_word {
            timeout-ms = <50>;
            key-positions = <16 19>; // T+H → CAPS_WORD (for CONSTANTS)
            bindings = <&caps_word>;
        };
    };

    macros {
        // Brackets with cursor inside
        macro_parens: macro_parens {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp LPAR &kp RPAR &kp LEFT>;
        };
        
        macro_brackets: macro_brackets {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp LBKT &kp RBKT &kp LEFT>;
        };
        
        macro_braces: macro_braces {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp LBRC &kp RBRC &kp LEFT>;
        };

        // Programming operators
        macro_double_equal: macro_double_equal {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp EQUAL &kp EQUAL>;
        };

        macro_not_equal: macro_not_equal {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp EXCL &kp EQUAL>;
        };

        macro_arrow: macro_arrow {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp EQUAL &kp GT>;
        };

        macro_dunder: macro_dunder {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp UNDER &kp UNDER>;
        };

        // Vim shortcuts
        macro_vim_save: macro_vim_save {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp COLON &kp W &kp RET>;
        };

        macro_vim_quit: macro_vim_quit {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp COLON &kp Q &kp RET>;
        };
    };

    keymap {
        compatible = "zmk,keymap";

        // ==================================================================
        // BASE LAYER - Your exact Colemak-DH (unchanged)
        // ==================================================================
        base_layer {
            label = "BASE";
            bindings = <
           &kp Q  &kp W           &kp F        &kp P        &kp G             &kp J                &kp L            &kp U          &kp Y            &kp SEMI
           &kp A  &mt LEFT_ALT R  &mt LCTRL S  &mt LSHFT T  &mt LEFT_GUI D    &mt RIGHT_COMMAND H  &mt RSHFT N      &mt RCTRL E    &mt RIGHT_ALT I  &kp O
&kp LCTRL  &kp Z  &kp X           &kp C        &kp V        &kp B             &kp K                &kp M            &kp COMMA      &kp DOT          &kp FSLH  &kp APOS
                                  &kp LGUI     &lt_nav NAV BSPC  &lt_sym SYM SPACE   &kp RET         &smart_shft      &kp RALT
            >;
        };

        // ==================================================================
        // NAV LAYER - Miryoku-inspired navigation
        // ==================================================================
        nav_layer {
            label = "NAV";
            bindings = <
           &trans     &trans     &trans     &trans     &trans            &kp HOME   &kp PG_DN   &kp PG_UP   &kp END     &kp DEL
           &kp LGUI   &kp LALT   &kp LCTRL  &kp LSHFT  &trans            &kp LEFT   &kp DOWN    &kp UP      &kp RIGHT   &kp BSPC
&trans     &trans     &trans     &trans     &trans     &trans            &kp LC(LEFT) &kp LC(DOWN) &kp LC(UP) &kp LC(RIGHT) &kp INS  &trans
                                 &trans     &trans                       &kp RET    &kp TAB
            >;
        };

        // ==================================================================
        // SYM LAYER - Most used symbols on home row
        // ==================================================================
        sym_layer {
            label = "SYM";
            bindings = <
           &kp EXCL   &kp AT     &kp HASH   &kp DLLR   &kp PRCNT         &kp CARET  &kp AMPS   &kp STAR   &kp LPAR   &kp RPAR
           &kp EQUAL  &kp MINUS  &kp PLUS   &kp UNDER  &kp COLON         &kp LBKT   &kp RBKT   &kp LBRC   &kp RBRC   &kp PIPE
&trans     &kp GRAVE  &kp TILDE  &kp LT     &kp GT     &kp BSLH          &kp FSLH   &kp SQT    &kp DQT    &kp QMARK  &kp SEMI  &trans
                                 &trans     &trans                       &trans     &trans
            >;
        };

        // ==================================================================
        // NUM LAYER - Numbers + F-keys
        // ==================================================================
        num_layer {
            label = "NUM";
            bindings = <
           &kp N1     &kp N2     &kp N3     &kp N4     &kp N5            &kp N6     &kp N7     &kp N8     &kp N9     &kp N0
           &kp F1     &kp F2     &kp F3     &kp F4     &kp F5            &kp F6     &kp N4     &kp N5     &kp N6     &kp MINUS
&trans     &kp F7     &kp F8     &kp F9     &kp F10    &kp F11           &kp F12    &kp N1     &kp N2     &kp N3     &kp DOT   &trans
                                 &trans     &trans                       &kp N0     &kp EQUAL
            >;
        };

        // ==================================================================
        // FUN LAYER - System controls, media, Bluetooth
        // ==================================================================
        fun_layer {
            label = "FUN";
            bindings = <
           &none      &none      &none      &none      &none             &none      &none      &none      &none      &none
           &kp LGUI   &kp LALT   &kp LCTRL  &kp LSHFT  &none             &kp C_PREV &kp C_VOL_DN &kp C_VOL_UP &kp C_NEXT &none
&none      &bt BT_SEL 0 &bt BT_SEL 1 &bt BT_SEL 2 &bt BT_CLR &out OUT_USB  &sys_reset &kp C_BRI_DN &kp C_BRI_UP &kp C_PP &bootloader &none
                                 &none      &none                        &none      &none
            >;
        };
    };

    conditional_layers {
        compatible = "zmk,conditional-layers";
        
        tri_layer {
            if-layers = <NAV SYM>;
            then-layer = <FUN>;
        };
    };
};
