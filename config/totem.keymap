/*
 * TOTEM KEYBOARD - Enhanced Daily Use Version
 * Fixed shift issues + optimized combos for programming
 */

#include <behaviors.dtsi>
#include <dt-bindings/zmk/keys.h>

#define BASE 0
#define NUM  1
#define SYM  2
#define NAV  3
#define KEYS_L 0 1 2 3 4 5 12 13 14 15 16 17 24 25 26 27 28 29
#define KEYS_R 6 7 8 9 10 11 18 19 20 21 22 23 30 31 32 33 34 35
#define THUMBS 36 37 38 39

/ {
    behaviors {
        // More conservative homerow settings to prevent accidental activation
        hml: homerow_left {
            compatible = "zmk,behavior-hold-tap";
            label = "HOMEROW_LEFT";
            #binding-cells = <2>;
            flavor = "balanced";
            tapping-term-ms = <320>;  // Increased from 280
            quick-tap-ms = <200>;     // Increased from 175
            require-prior-idle-ms = <200>; // Increased from 150
            bindings = <&kp>, <&kp>;
            hold-trigger-key-positions = <KEYS_R THUMBS>;
            hold-trigger-on-release;
        };

        hmr: homerow_right {
            compatible = "zmk,behavior-hold-tap";
            label = "HOMEROW_RIGHT";
            #binding-cells = <2>;
            flavor = "balanced";
            tapping-term-ms = <320>;  // Increased from 280
            quick-tap-ms = <200>;     // Increased from 175
            require-prior-idle-ms = <200>; // Increased from 150
            bindings = <&kp>, <&kp>;
            hold-trigger-key-positions = <KEYS_L THUMBS>;
            hold-trigger-on-release;
        };

        // Layer tap for easier access
        lt_spc: layer_tap_space {
            compatible = "zmk,behavior-hold-tap";
            label = "LAYER_TAP_SPACE";
            #binding-cells = <2>;
            flavor = "balanced";
            tapping-term-ms = <200>;
            quick-tap-ms = <150>;
            bindings = <&mo>, <&kp>;
        };
    };

    combos {
        compatible = "zmk,combos";

        // Essential keys - more accessible positions
        combo_esc {
            key-positions = <0 1>;  // Q+W
            bindings = <&kp ESC>;
            timeout-ms = <40>;
        };

        combo_tab {
            key-positions = <13 14>; // S+T (easier reach)
            bindings = <&kp TAB>;
            timeout-ms = <40>;
        };

        combo_enter {
            key-positions = <21 22>; // E+I
            bindings = <&kp RET>;
            timeout-ms = <40>;
        };

        // Programming essentials - frequently used
        combo_equal {
            key-positions = <7 8>;   // U+Y
            bindings = <&kp EQUAL>;
            timeout-ms = <40>;
        };

        combo_minus {
            key-positions = <8 9>;   // Y+SEMI
            bindings = <&kp MINUS>;
            timeout-ms = <40>;
        };

        // Brackets - logical pairs
        combo_lpar {
            key-positions = <2 3>;   // F+P
            bindings = <&kp LPAR>;
            timeout-ms = <40>;
        };

        combo_rpar {
            key-positions = <3 4>;   // P+G
            bindings = <&kp RPAR>;
            timeout-ms = <40>;
        };

        combo_lbkt {
            key-positions = <14 15>; // T+D
            bindings = <&kp LBKT>;
            timeout-ms = <40>;
        };

        combo_rbkt {
            key-positions = <19 20>; // H+N
            bindings = <&kp RBKT>;
            timeout-ms = <40>;
        };

        combo_lbrc {
            key-positions = <26 27>; // C+V
            bindings = <&kp LBRC>;
            timeout-ms = <40>;
        };

        combo_rbrc {
            key-positions = <27 28>; // V+B
            bindings = <&kp RBRC>;
            timeout-ms = <40>;
        };

        // Common programming symbols
        combo_quote {
            key-positions = <32 33>; // DOT+FSLH
            bindings = <&kp SQT>;
            timeout-ms = <40>;
        };

        combo_dquote {
            key-positions = <31 32>; // COMMA+DOT
            bindings = <&kp DQT>;
            timeout-ms = <40>;
        };

        combo_colon {
            key-positions = <20 21>; // N+E
            bindings = <&kp COLON>;
            timeout-ms = <40>;
        };

        combo_semi {
            key-positions = <21 22>; // E+I
            bindings = <&kp SEMI>;
            timeout-ms = <40>;
        };

        // Developer shortcuts
        combo_copy {
            key-positions = <25 26>; // Z+X
            bindings = <&kp LC(C)>;
            timeout-ms = <40>;
        };

        combo_paste {
            key-positions = <26 27>; // X+C
            bindings = <&kp LC(V)>;
            timeout-ms = <40>;
        };

        combo_undo {
            key-positions = <24 25>; // ESC+Z
            bindings = <&kp LC(Z)>;
            timeout-ms = <40>;
        };

        combo_save {
            key-positions = <13 15>; // S+D
            bindings = <&kp LC(S)>;
            timeout-ms = <40>;
        };
    };

    keymap {
        compatible = "zmk,keymap";

        base_layer {
            label = "BASE";
            bindings = <
         &kp Q  &kp W            &kp F         &kp P         &kp G              &kp J                 &kp L         &kp U         &kp Y             &kp SEMI
         &kp A  &hml LEFT_ALT R  &hml LCTRL S  &hml LSHFT T  &hml LEFT_GUI D    &hmr RIGHT_GUI H      &hmr RSHFT N  &hmr RCTRL E  &hmr RIGHT_ALT I  &kp O
&kp ESC  &kp Z  &kp X            &kp C         &kp V         &kp B              &kp K                 &kp M         &kp COMMA     &kp DOT           &kp FSLH  &kp APOS
                                 &lt NAV TAB   &lt NUM BSPC  &kp SPACE          &kp RET               &lt SYM DEL   &kp ESC
            >;
        };

        num_layer {
            label = "NUM";
            bindings = <
        &kp EXCL   &kp AT    &kp HASH  &kp DLLR   &kp PRCNT     &kp CARET  &kp AMPS   &kp STAR   &kp LPAR   &kp RPAR
        &kp N1     &kp N2    &kp N3    &kp N4     &kp N5        &kp N6     &kp N7     &kp N8     &kp N9     &kp N0
&trans  &kp GRAVE  &kp MINUS &kp PLUS  &kp EQUAL  &kp UNDER     &kp PIPE   &kp LBRC   &kp RBRC   &kp LBKT   &kp RBKT  &trans
                             &trans    &trans     &trans        &kp COMMA  &kp DOT    &kp SEMI
            >;
        };

        sym_layer {
            label = "SYM";
            bindings = <
        &kp TILDE  &kp LT     &kp GT    &kp PIPE   &kp BSLH      &kp CARET  &kp AMPS   &kp STAR   &kp PRCNT  &kp DLLR
        &kp GRAVE  &kp MINUS  &kp PLUS  &kp EQUAL  &kp UNDER     &kp COLON  &kp LPAR   &kp RPAR   &kp LBRC   &kp RBRC
&trans  &kp EXCL   &kp AT     &kp HASH  &kp QMARK  &kp FSLH      &kp SQT    &kp DQT    &kp LBKT   &kp RBKT   &kp SEMI  &trans
                              &kp F1    &kp F2     &kp F3        &trans     &trans     &trans
            >;
        };

        nav_layer {
            label = "NAV";
            bindings = <
        &kp F1     &kp F2     &kp F3     &kp F4     &kp F5        &kp HOME   &kp PG_DN  &kp PG_UP  &kp END    &kp DEL
        &kp LGUI   &kp LALT   &kp LCTRL  &kp LSHFT  &kp F6        &kp LEFT   &kp DOWN   &kp UP     &kp RIGHT  &kp BSPC
&trans  &kp F7     &kp F8     &kp F9     &kp F10    &kp F11       &kp C_PREV &kp C_PP   &kp C_NEXT &kp C_VOL_DN &kp C_VOL_UP &kp F12
                              &trans     &trans     &kp RET       &trans     &trans     &trans
            >;
        };
    };
};
