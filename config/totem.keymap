/*
 * TOTEM 38-KEY COMPLETE LAYOUT
 * All keys mapped with optimized thumb cluster
 */

#include <behaviors.dtsi>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/outputs.h>

#define BASE 0
#define NAV  1
#define NUM  2
#define SYM  3
#define FN   4
#define SYS  5

// Totem 38-key positions (all keys)
#define KEYS_L 0 1 2 3 4 10 11 12 13 14 20 21 22 23 24  // Left hand
#define KEYS_R 5 6 7 8 9 15 16 17 18 19 25 26 27 28 29  // Right hand
#define THUMBS 30 31 32 33 34 35                         // All 6 thumbs

#define QUICK_TAP_MS 175

/ {
    behaviors {
        // Fixed homerow mods (prevents shift issue)
        hml: homerow_left {
            compatible = "zmk,behavior-hold-tap";
            label = "HOMEROW_LEFT";
            #binding-cells = <2>;
            flavor = "balanced";
            tapping-term-ms = <280>;
            quick-tap-ms = <QUICK_TAP_MS>;
            require-prior-idle-ms = <150>;
            bindings = <&kp>, <&kp>;
            hold-trigger-key-positions = <KEYS_R THUMBS>;
            hold-trigger-on-release;
        };

        hmr: homerow_right {
            compatible = "zmk,behavior-hold-tap";
            label = "HOMEROW_RIGHT";
            #binding-cells = <2>;
            flavor = "balanced";
            tapping-term-ms = <280>;
            quick-tap-ms = <QUICK_TAP_MS>;
            require-prior-idle-ms = <150>;
            bindings = <&kp>, <&kp>;
            hold-trigger-key-positions = <KEYS_L THUMBS>;
            hold-trigger-on-release;
        };

        // Layer-tap behaviors
        lt_nav: layer_tap_nav {
            compatible = "zmk,behavior-hold-tap";
            label = "LAYER_TAP_NAV";
            #binding-cells = <2>;
            flavor = "balanced";
            tapping-term-ms = <200>;
            quick-tap-ms = <QUICK_TAP_MS>;
            bindings = <&mo>, <&kp>;
        };

        lt_num: layer_tap_num {
            compatible = "zmk,behavior-hold-tap";
            label = "LAYER_TAP_NUM";
            #binding-cells = <2>;
            flavor = "balanced";
            tapping-term-ms = <200>;
            quick-tap-ms = <QUICK_TAP_MS>;
            bindings = <&mo>, <&kp>;
        };

        lt_sym: layer_tap_sym {
            compatible = "zmk,behavior-hold-tap";
            label = "LAYER_TAP_SYM";
            #binding-cells = <2>;
            flavor = "balanced";
            tapping-term-ms = <200>;
            quick-tap-ms = <QUICK_TAP_MS>;
            bindings = <&mo>, <&kp>;
        };

        // Smart shift behavior
        smart_shft: smart_shift {
            compatible = "zmk,behavior-mod-morph";
            label = "SMART_SHIFT";
            #binding-cells = <0>;
            bindings = <&sk LSHFT>, <&caps_word>;
            mods = <(MOD_LSFT)>;
        };

        // Smart punctuation
        comma_morph: comma_morph {
            compatible = "zmk,behavior-mod-morph";
            label = "COMMA_MORPH";
            #binding-cells = <0>;
            bindings = <&kp COMMA>, <&kp SEMI>;
            mods = <(MOD_LSFT|MOD_RSFT)>;
        };

        dot_morph: dot_morph {
            compatible = "zmk,behavior-mod-morph";
            label = "DOT_MORPH";
            #binding-cells = <0>;
            bindings = <&kp DOT>, <&kp COLON>;
            mods = <(MOD_LSFT|MOD_RSFT)>;
        };

        qexcl: question_exclamation {
            compatible = "zmk,behavior-mod-morph";
            label = "QUESTION_EXCLAMATION";
            #binding-cells = <0>;
            bindings = <&kp QMARK>, <&kp EXCL>;
            mods = <(MOD_LSFT|MOD_RSFT)>;
        };
    };

    combos {
        compatible = "zmk,combos";

        // Essential shortcuts
        combo_esc {
            key-positions = <2 3>;
            bindings = <&kp ESC>;
            timeout-ms = <50>;
        };

        combo_tab {
            key-positions = <12 13>;
            bindings = <&kp TAB>;
            timeout-ms = <50>;
        };

        // Brackets
        combo_lpar {
            key-positions = <16 17>;
            bindings = <&kp LPAR>;
            timeout-ms = <50>;
        };

        combo_rpar {
            key-positions = <17 18>;
            bindings = <&kp RPAR>;
            timeout-ms = <50>;
        };

        combo_lbkt {
            key-positions = <26 27>;
            bindings = <&kp LBKT>;
            timeout-ms = <50>;
        };

        combo_rbkt {
            key-positions = <27 28>;
            bindings = <&kp RBKT>;
            timeout-ms = <50>;
        };

        combo_lbrc {
            key-positions = <25 26>;
            bindings = <&kp LBRC>;
            timeout-ms = <50>;
        };

        combo_rbrc {
            key-positions = <28 29>;
            bindings = <&kp RBRC>;
            timeout-ms = <50>;
        };

        // Clipboard
        combo_copy {
            key-positions = <21 23>;
            bindings = <&kp LC(C)>;
            timeout-ms = <50>;
        };

        combo_paste {
            key-positions = <22 23>;
            bindings = <&kp LC(V)>;
            timeout-ms = <50>;
        };

        combo_cut {
            key-positions = <21 22>;
            bindings = <&kp LC(X)>;
            timeout-ms = <50>;
        };
    };

    keymap {
        compatible = "zmk,keymap";

        // BASE LAYER (0)
        base_layer {
            label = "BASE";
            bindings = <
        // ┌─────┬─────┬─────┬─────┬─────┐   ┌─────┬─────┬─────┬─────┬─────┐
             &kp Q &kp W &kp F &kp P &kp G     &kp J &kp L &kp U &kp Y &kp SQT
        // ├─────┼─────┼─────┼─────┼─────┤   ├─────┼─────┼─────┼─────┼─────┤
             &kp A &hml LALT R &hml LCTRL S &hml LSHFT T &hml LGUI D   &hmr RGUI H &hmr RSHFT N &hmr RCTRL E &hmr RALT I &kp O
        // ├─────┼─────┼─────┼─────┼─────┤   ├─────┼─────┼─────┼─────┼─────┤
             &kp Z &kp X &kp C &kp V &kp B     &kp K &kp M &comma_morph &dot_morph &qexcl
        // └─────┴─────┴─────┼─────┼─────┼─────┼─────┼─────┼─────┴─────┴─────┘
                           &lt_nav NAV DEL &kp BSPC &mo FN   &lt_num NUM SPACE &lt_sym SYM RET &smart_shft
        //                 └─────┴─────┴─────┴─────┴─────┴─────┘
            >;
        };

        // NAVIGATION LAYER (1)
        nav_layer {
            label = "NAV";
            bindings = <
        // ┌─────┬─────┬─────┬─────┬─────┐   ┌─────┬─────┬─────┬─────┬─────┐
             &kp LA(F4) &kp LC(W) &kp LS(TAB) &kp LA(TAB) &kp LC(T)   &kp PG_UP &kp HOME &kp UP &kp END &kp INS
        // ├─────┼─────┼─────┼─────┼─────┤   ├─────┼─────┼─────┼─────┼─────┤
             &sk LGUI &sk LALT &sk LCTRL &sk LSHFT &sk RGUI   &kp PG_DN &kp LEFT &kp DOWN &kp RIGHT &kp RET
        // ├─────┼─────┼─────┼─────┼─────┤   ├─────┼─────┼─────┼─────┼─────┤
             &kp LC(Z) &kp LC(X) &kp LC(C) &kp LC(V) &kp LC(Y)   &kp CAPS &kp LC(LEFT) &kp LC(DOWN) &kp LC(RIGHT) &kp DEL
        // └─────┴─────┴─────┼─────┼─────┼─────┼─────┼─────┼─────┴─────┴─────┘
                           &trans &trans &trans   &kp LC(HOME) &kp LC(END) &kp K_CANCEL
        //                 └─────┴─────┴─────┴─────┴─────┴─────┘
            >;
        };

        // NUMBER LAYER (2)
        num_layer {
            label = "NUM";
            bindings = <
        // ┌─────┬─────┬─────┬─────┬─────┐   ┌─────┬─────┬─────┬─────┬─────┐
             &kp EXCL &kp N7 &kp N8 &kp N9 &kp STAR   &kp FSLH &kp N7 &kp N8 &kp N9 &kp MINUS
        // ├─────┼─────┼─────┼─────┼─────┤   ├─────┼─────┼─────┼─────┼─────┤
             &hml LGUI N0 &hml LALT N4 &hml LCTRL N5 &hml LSHFT N6 &kp PLUS   &kp EQUAL &hmr RSHFT N4 &hmr RCTRL N5 &hmr RALT N6 &hmr RGUI DOT
        // ├─────┼─────┼─────┼─────┼─────┤   ├─────┼─────┼─────┼─────┼─────┤
             &kp COMMA &kp N1 &kp N2 &kp N3 &kp DOT   &kp N0 &kp N1 &kp N2 &kp N3 &kp ENTER
        // └─────┴─────┴─────┼─────┼─────┼─────┼─────┼─────┼─────┴─────┴─────┘
                           &kp LC(A) &kp BSPC &trans   &trans &kp COMMA &kp DOT
        //                 └─────┴─────┴─────┴─────┴─────┴─────┘
            >;
        };

        // SYMBOL LAYER (3)
        sym_layer {
            label = "SYM";
            bindings = <
        // ┌─────┬─────┬─────┬─────┬─────┐   ┌─────┬─────┬─────┬─────┬─────┐
             &kp EXCL &kp AT &kp HASH &kp DLLR &kp PRCNT   &kp CARET &kp AMPS &kp STAR &kp LPAR &kp RPAR
        // ├─────┼─────┼─────┼─────┼─────┤   ├─────┼─────┼─────┼─────┼─────┤
             &kp GRAVE &kp MINUS &kp PLUS &kp EQUAL &kp COLON   &kp PIPE &kp LBRC &kp RBRC &kp LBKT &kp RBKT
        // ├─────┼─────┼─────┼─────┼─────┤   ├─────┼─────┼─────┼─────┼─────┤
             &kp TILDE &kp UNDER &kp BSLH &kp FSLH &kp SEMI   &kp LT &kp GT &kp SQT &kp DQT &kp QMARK
        // └─────┴─────┴─────┼─────┼─────┼─────┼─────┼─────┼─────┴─────┴─────┘
                           &kp GRAVE &kp BSLH &trans   &kp PIPE &trans &kp TILDE
        //                 └─────┴─────┴─────┴─────┴─────┴─────┘
            >;
        };

        // FUNCTION LAYER (4)
        fn_layer {
            label = "FN";
            bindings = <
        // ┌─────┬─────┬─────┬─────┬─────┐   ┌─────┬─────┬─────┬─────┬─────┐
             &kp F12 &kp F7 &kp F8 &kp F9 &kp PRINTSCREEN   &kp C_VOL_UP &kp C_PREV &kp C_PP &kp C_NEXT &kp C_BRI_UP
        // ├─────┼─────┼─────┼─────┼─────┤   ├─────┼─────┼─────┼─────┼─────┤
             &kp F11 &kp F4 &kp F5 &kp F6 &kp SCROLLLOCK   &kp C_VOL_DN &kp C_MUTE &trans &trans &kp C_BRI_DN
        // ├─────┼─────┼─────┼─────┼─────┤   ├─────┼─────┼─────┼─────┼─────┤
             &kp F10 &kp F1 &kp F2 &kp F3 &kp PAUSE_BREAK   &trans &trans &trans &trans &trans
        // └─────┴─────┴─────┼─────┼─────┼─────┼─────┼─────┼─────┴─────┴─────┘
                           &kp F13 &kp F14 &trans   &kp F15 &kp F16 &kp C_SLEEP
        //                 └─────┴─────┴─────┴─────┴─────┴─────┘
            >;
        };

        // SYSTEM LAYER (5)
        sys_layer {
            label = "SYS";
            bindings = <
        // ┌─────┬─────┬─────┬─────┬─────┐   ┌─────┬─────┬─────┬─────┬─────┐
             &bt BT_SEL 0 &bt BT_SEL 1 &bt BT_SEL 2 &bt BT_SEL 3 &bt BT_CLR   &trans &trans &trans &trans &trans
        // ├─────┼─────┼─────┼─────┼─────┤   ├─────┼─────┼─────┼─────┼─────┤
             &out OUT_USB &out OUT_BLE &trans &trans &trans   &trans &trans &trans &trans &trans
        // ├─────┼─────┼─────┼─────┼─────┤   ├─────┼─────┼─────┼─────┼─────┤
             &trans &trans &trans &bootloader &sys_reset   &sys_reset &bootloader &trans &trans &trans
        // └─────┴─────┴─────┼─────┼─────┼─────┼─────┼─────┼─────┴─────┴─────┘
                           &trans &trans &trans   &trans &trans &trans
        //                 └─────┴─────┴─────┴─────┴─────┴─────┘
            >;
        };
    };

    conditional_layers {
        compatible = "zmk,conditional-layers";
        tri_layer {
            if-layers = <NUM SYM>;
            then-layer = <SYS>;
        };
    };
};
