/*
 * Copyright (c) 2020 The ZMK Contributors
 * SPDX-License-Identifier: MIT
 * 
 * TOTEM 38-KEY - Based on urob's timeless approach
 * Your exact Colemak-DH + urob's best practices
 */

#include <behaviors.dtsi>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/outputs.h>

#define BASE 0
#define NAV  1
#define NUM  2
#define FUN  3

#define KEYS_L 0 1 2 3 4 5 12 13 14 15 16 17 24 25 26 27 28 29
#define KEYS_R 6 7 8 9 10 11 18 19 20 21 22 23 30 31 32 33 34 35
#define THUMBS 36 37 38 39

/ {
    behaviors {
        // UROB'S TIMELESS HOMEROW MODS - Exact settings
        hml: homerow_left {
            compatible = "zmk,behavior-hold-tap";
            #binding-cells = <2>;
            flavor = "balanced";
            tapping-term-ms = <280>;
            quick-tap-ms = <175>;
            require-prior-idle-ms = <150>;
            bindings = <&kp>, <&kp>;
            hold-trigger-key-positions = <KEYS_R THUMBS>;
            hold-trigger-on-release;
        };

        hmr: homerow_right {
            compatible = "zmk,behavior-hold-tap";
            #binding-cells = <2>;
            flavor = "balanced";
            tapping-term-ms = <280>;
            quick-tap-ms = <175>;
            require-prior-idle-ms = <150>;
            bindings = <&kp>, <&kp>;
            hold-trigger-key-positions = <KEYS_L THUMBS>;
            hold-trigger-on-release;
        };

        // UROB'S MAGIC THUMB - Repeat/Sticky-shift/Capsword
        magic_shift: magic_shift {
            compatible = "zmk,behavior-mod-morph";
            #binding-cells = <0>;
            bindings = <&sk LSHFT>, <&caps_word>;
            mods = <(MOD_LSFT)>;
        };

        // Smart layer-taps for thumbs
        lt_nav: lt_nav {
            compatible = "zmk,behavior-hold-tap";
            #binding-cells = <2>;
            flavor = "balanced";
            tapping-term-ms = <200>;
            quick-tap-ms = <150>;
            bindings = <&mo>, <&kp>;
        };

        // Multi-purpose navigation (urob's arrow cluster concept)
        smart_nav: smart_nav {
            compatible = "zmk,behavior-hold-tap";
            #binding-cells = <2>;
            flavor = "tap-preferred";
            tapping-term-ms = <200>;
            bindings = <&kp>, <&kp>;
        };
    };

    combos {
        compatible = "zmk,combos";

        // UROB'S VERTICAL COMBOS - Number row pattern
        // Top row vertical combos
        combo_excl {
            timeout-ms = <50>;
            key-positions = <1 13>; // W+X (vertical)
            bindings = <&kp EXCL>;
            require-prior-idle-ms = <150>;
        };
        combo_at {
            timeout-ms = <50>;
            key-positions = <2 14>; // F+R (vertical)
            bindings = <&kp AT>;
            require-prior-idle-ms = <150>;
        };
        combo_hash {
            timeout-ms = <50>;
            key-positions = <3 15>; // P+S (vertical)
            bindings = <&kp HASH>;
            require-prior-idle-ms = <150>;
        };
        combo_dllr {
            timeout-ms = <50>;
            key-positions = <4 16>; // G+T (vertical)
            bindings = <&kp DLLR>;
            require-prior-idle-ms = <150>;
        };
        combo_prcnt {
            timeout-ms = <50>;
            key-positions = <5 17>; // B+D (vertical)
            bindings = <&kp PRCNT>;
            require-prior-idle-ms = <150>;
        };
        combo_caret {
            timeout-ms = <50>;
            key-positions = <6 18>; // J+H (vertical)
            bindings = <&kp CARET>;
            require-prior-idle-ms = <150>;
        };
        combo_amps {
            timeout-ms = <50>;
            key-positions = <7 19>; // L+N (vertical)
            bindings = <&kp AMPS>;
            require-prior-idle-ms = <150>;
        };
        combo_star {
            timeout-ms = <50>;
            key-positions = <8 20>; // U+E (vertical)
            bindings = <&kp STAR>;
            require-prior-idle-ms = <150>;
        };

        // Bottom row vertical combos (symmetric to top)
        combo_under {
            timeout-ms = <50>;
            key-positions = <13 25>; // X+Z (vertical)
            bindings = <&kp UNDER>;
            require-prior-idle-ms = <150>;
        };
        combo_minus {
            timeout-ms = <50>;
            key-positions = <14 26>; // R+A (vertical)
            bindings = <&kp MINUS>;
            require-prior-idle-ms = <150>;
        };
        combo_plus {
            timeout-ms = <50>;
            key-positions = <15 27>; // S+C (vertical)
            bindings = <&kp PLUS>;
            require-prior-idle-ms = <150>;
        };
        combo_equal {
            timeout-ms = <50>;
            key-positions = <16 28>; // T+V (vertical)
            bindings = <&kp EQUAL>;
            require-prior-idle-ms = <150>;
        };
        combo_pipe {
            timeout-ms = <50>;
            key-positions = <19 31>; // N+M (vertical)
            bindings = <&kp PIPE>;
            require-prior-idle-ms = <150>;
        };

        // UROB'S HORIZONTAL COMBOS - Brackets (symmetric)
        combo_lpar {
            timeout-ms = <50>;
            key-positions = <8 9>; // U+Y
            bindings = <&kp LPAR>;
            require-prior-idle-ms = <150>;
        };
        combo_rpar {
            timeout-ms = <50>;
            key-positions = <9 10>; // Y+;
            bindings = <&kp RPAR>;
            require-prior-idle-ms = <150>;
        };
        combo_lbkt {
            timeout-ms = <50>;
            key-positions = <20 21>; // E+I
            bindings = <&kp LBKT>;
            require-prior-idle-ms = <150>;
        };
        combo_rbkt {
            timeout-ms = <50>;
            key-positions = <21 22>; // I+O
            bindings = <&kp RBKT>;
            require-prior-idle-ms = <150>;
        };
        combo_lbrc {
            timeout-ms = <50>;
            key-positions = <32 33>; // ,+.
            bindings = <&kp LBRC>;
            require-prior-idle-ms = <150>;
        };
        combo_rbrc {
            timeout-ms = <50>;
            key-positions = <33 34>; // .+/
            bindings = <&kp RBRC>;
            require-prior-idle-ms = <150>;
        };

        // Essential combos
        combo_esc {
            timeout-ms = <50>;
            key-positions = <14 15>; // R+S
            bindings = <&kp ESC>;
            require-prior-idle-ms = <150>;
        };
        combo_ret {
            timeout-ms = <50>;
            key-positions = <19 20>; // N+E
            bindings = <&kp RET>;
            require-prior-idle-ms = <150>;
        };
        combo_tab {
            timeout-ms = <50>;
            key-positions = <15 16>; // S+T
            bindings = <&kp TAB>;
            require-prior-idle-ms = <150>;
        };

        // Urob's left-hand mouse combos (adapted)
        combo_copy {
            timeout-ms = <50>;
            key-positions = <27 28>; // C+V
            bindings = <&kp LC(C)>;
            require-prior-idle-ms = <150>;
        };
        combo_paste {
            timeout-ms = <50>;
            key-positions = <28 29>; // V+B
            bindings = <&kp LC(V)>;
            require-prior-idle-ms = <150>;
        };
        combo_cut {
            timeout-ms = <50>;
            key-positions = <26 27>; // X+C
            bindings = <&kp LC(X)>;
            require-prior-idle-ms = <150>;
        };

        // Additional useful combos
        combo_colon {
            timeout-ms = <50>;
            key-positions = <7 8>; // L+U
            bindings = <&kp COLON>;
            require-prior-idle-ms = <150>;
        };
        combo_semi {
            timeout-ms = <50>;
            key-positions = <32 34>; // ,+/
            bindings = <&kp SEMI>;
            require-prior-idle-ms = <150>;
        };
    };

    keymap {
        compatible = "zmk,keymap";

        // ==================================================================
        // BASE LAYER - Your exact Colemak-DH (unchanged)
        // ==================================================================
        base_layer {
            label = "BASE";
            bindings = <
           &kp Q  &kp W           &kp F        &kp P        &kp G             &kp J                &kp L            &kp U          &kp Y            &kp SEMI
           &kp A  &hml LEFT_ALT R &hml LCTRL S &hml LSHFT T &hml LEFT_GUI D   &hmr RIGHT_COMMAND H &hmr RSHFT N     &hmr RCTRL E   &hmr RIGHT_ALT I &kp O
&kp LCTRL  &kp Z  &kp X           &kp C        &kp V        &kp B             &kp K                &kp M            &kp COMMA      &kp DOT          &kp FSLH  &kp APOS
                                  &kp LGUI     &lt_nav NAV BSPC  &mo NUM       &kp SPACE            &magic_shift     &kp RALT
            >;
        };

        // ==================================================================
        // NAV LAYER - Urob's navigation concept (arrows on home row)
        // Multi-purpose: tap for arrow, hold for home/end/doc navigation
        // ==================================================================
        nav_layer {
            label = "NAV";
            bindings = <
           &trans     &trans     &trans     &trans     &trans            &smart_nav LC(HOME) HOME   &smart_nav LC(PG_DN) PG_DN   &smart_nav LC(PG_UP) PG_UP   &smart_nav LC(END) END   &kp DEL
           &kp LGUI   &kp LALT   &kp LCTRL  &kp LSHFT  &trans            &smart_nav HOME LEFT       &smart_nav PG_DN DOWN        &smart_nav PG_UP UP          &smart_nav END RIGHT     &kp BSPC
&trans     &trans     &trans     &trans     &trans     &trans            &kp LC(LEFT)               &kp LC(BSPC)                 &kp LC(DEL)                  &kp LC(RIGHT)            &kp INS   &trans
                                 &trans     &trans                       &kp RET                    &kp TAB
            >;
        };

        // ==================================================================
        // NUM LAYER - Numbers + F-keys (urob's numword concept adapted)
        // ==================================================================
        num_layer {
            label = "NUM";
            bindings = <
           &kp N1     &kp N2     &kp N3     &kp N4     &kp N5            &kp N6     &kp N7     &kp N8     &kp N9     &kp N0
           &kp F1     &kp F2     &kp F3     &kp F4     &kp F5            &kp F6     &kp F7     &kp F8     &kp F9     &kp F10
&trans     &trans     &trans     &trans     &trans     &kp F11           &kp F12    &kp COMMA  &kp DOT    &kp MINUS  &kp EQUAL  &trans
                                 &trans     &trans                       &kp N0     &trans
            >;
        };

        // ==================================================================
        // FUN LAYER - System controls (activated via conditional layer)
        // ==================================================================
        fun_layer {
            label = "FUN";
            bindings = <
           &none      &none      &none      &none      &none             &none      &none      &none      &none      &none
           &kp LGUI   &kp LALT   &kp LCTRL  &kp LSHFT  &none             &kp C_PREV &kp C_VOL_DN &kp C_VOL_UP &kp C_NEXT &none
&none      &bt BT_SEL 0 &bt BT_SEL 1 &bt BT_SEL 2 &bt BT_CLR &out OUT_USB  &sys_reset &kp C_BRI_DN &kp C_BRI_UP &kp C_PP &bootloader &none
                                 &none      &none                        &none      &none
            >;
        };
    };

    conditional_layers {
        compatible = "zmk,conditional-layers";

        // Urob's tri-layer concept
        tri_layer {
            if-layers = <NAV NUM>;
            then-layer = <FUN>;
        };
    };
};
