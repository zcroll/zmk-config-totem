/*
 * TOTEM 38-KEY LAYOUT - Complete with urob's Advanced Features
 * All 6 thumb keys properly configured
 */

#include <behaviors.dtsi>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/outputs.h>

#define BASE 0
#define NAV  1
#define NUM  2
#define SYM  3
#define FN   4
#define SYS  5

// Complete Totem 38-key positions (including all 6 thumbs)
#define KEYS_L 0 1 2 3 4 10 11 12 13 14 20 21 22 23 24    // Left 15 keys
#define KEYS_R 5 6 7 8 9 15 16 17 18 19 25 26 27 28 29    // Right 15 keys
#define THUMBS 30 31 32 33 34 35                           // All 6 thumb keys

#define QUICK_TAP_MS 175
#define COMBO_TERM_FAST 18
#define COMBO_TERM_SLOW 30
#define COMBO_IDLE_FAST 150
#define COMBO_IDLE_SLOW 50

/ {
    behaviors {
        // urob's "timeless" homerow mods - prevents shift issues
        hml: homerow_left {
            compatible = "zmk,behavior-hold-tap";
            label = "HOMEROW_LEFT";
            #binding-cells = <2>;
            flavor = "balanced";
            tapping-term-ms = <280>;
            quick-tap-ms = <QUICK_TAP_MS>;
            require-prior-idle-ms = <150>;
            bindings = <&kp>, <&kp>;
            hold-trigger-key-positions = <KEYS_R THUMBS>;
            hold-trigger-on-release;
        };

        hmr: homerow_right {
            compatible = "zmk,behavior-hold-tap";
            label = "HOMEROW_RIGHT";
            #binding-cells = <2>;
            flavor = "balanced";
            tapping-term-ms = <280>;
            quick-tap-ms = <QUICK_TAP_MS>;
            require-prior-idle-ms = <150>;
            bindings = <&kp>, <&kp>;
            hold-trigger-key-positions = <KEYS_L THUMBS>;
            hold-trigger-on-release;
        };

        // urob's layer-tap with smart space
        lt_spc: layer_tap_space {
            compatible = "zmk,behavior-hold-tap";
            label = "LAYER_TAP_SPACE";
            #binding-cells = <2>;
            flavor = "balanced";
            tapping-term-ms = <200>;
            quick-tap-ms = <QUICK_TAP_MS>;
            bindings = <&mo>, <&spc_morph>;
        };

        // Smart space behavior (urob style)
        spc_morph: space_morph {
            compatible = "zmk,behavior-mod-morph";
            label = "SPACE_MORPH";
            #binding-cells = <0>;
            bindings = <&kp SPACE>, <&dot_spc>;
            mods = <(MOD_LSFT)>;
        };

        // urob's magic shift behavior
        magic_shift: magic_shift {
            compatible = "zmk,behavior-hold-tap";
            label = "MAGIC_SHIFT";
            #binding-cells = <2>;
            flavor = "balanced";
            tapping-term-ms = <200>;
            quick-tap-ms = <QUICK_TAP_MS>;
            bindings = <&kp>, <&magic_shift_tap>;
        };

        magic_shift_tap: magic_shift_tap {
            compatible = "zmk,behavior-mod-morph";
            label = "MAGIC_SHIFT_TAP";
            #binding-cells = <0>;
            bindings = <&shift_repeat>, <&caps_word>;
            mods = <(MOD_LSFT)>;
        };

        shift_repeat: shift_repeat {
            compatible = "zmk,behavior-mod-morph";
            label = "SHIFT_REPEAT";
            #binding-cells = <0>;
            bindings = <&sk LSHFT>, <&key_repeat>;
            mods = <(MOD_LSFT)>;
        };

        // urob's smart punctuation
        comma_morph: comma_morph {
            compatible = "zmk,behavior-mod-morph";
            label = "COMMA_MORPH";
            #binding-cells = <0>;
            bindings = <&kp COMMA>, <&comma_inner>;
            mods = <(MOD_LSFT|MOD_RSFT)>;
        };

        comma_inner: comma_inner {
            compatible = "zmk,behavior-mod-morph";
            label = "COMMA_INNER";
            #binding-cells = <0>;
            bindings = <&kp SEMICOLON>, <&kp LESS_THAN>;
            mods = <(MOD_LCTL|MOD_RCTL)>;
        };

        dot_morph: dot_morph {
            compatible = "zmk,behavior-mod-morph";
            label = "DOT_MORPH";
            #binding-cells = <0>;
            bindings = <&kp DOT>, <&dot_inner>;
            mods = <(MOD_LSFT|MOD_RSFT)>;
        };

        dot_inner: dot_inner {
            compatible = "zmk,behavior-mod-morph";
            label = "DOT_INNER";
            #binding-cells = <0>;
            bindings = <&kp COLON>, <&kp GREATER_THAN>;
            mods = <(MOD_LCTL|MOD_RCTL)>;
        };

        qexcl: question_exclamation {
            compatible = "zmk,behavior-mod-morph";
            label = "QUESTION_EXCLAMATION";
            #binding-cells = <0>;
            bindings = <&kp QMARK>, <&kp EXCL>;
            mods = <(MOD_LSFT|MOD_RSFT)>;
        };

        // urob's smart delete with word deletion
        bs_del: backspace_delete {
            compatible = "zmk,behavior-mod-morph";
            label = "BACKSPACE_DELETE";
            #binding-cells = <0>;
            bindings = <&kp BSPC>, <&kp DEL>;
            mods = <(MOD_LSFT|MOD_RSFT)>;
            keep-mods = <MOD_RSFT>;
        };

        // Layer taps for remaining thumb keys
        lt_nav: layer_tap_nav {
            compatible = "zmk,behavior-hold-tap";
            label = "LAYER_TAP_NAV";
            #binding-cells = <2>;
            flavor = "balanced";
            tapping-term-ms = <200>;
            quick-tap-ms = <QUICK_TAP_MS>;
            bindings = <&mo>, <&kp>;
        };
    };

    macros {
        // urob's dot-space-shift macro
        dot_spc: dot_space_shift {
            label = "DOT_SPACE_SHIFT";
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp DOT &kp SPACE &sk LSHFT>;
            wait-ms = <0>;
            tap-ms = <5>;
        };
    };

    combos {
        compatible = "zmk,combos";

        // urob's horizontal combos - left hand
        combo_esc {
            key-positions = <2 3>;     // F P
            bindings = <&kp ESC>;
            timeout-ms = <COMBO_TERM_FAST>;
            require-prior-idle-ms = <COMBO_IDLE_FAST>;
        };

        combo_tab {
            key-positions = <12 13>;   // S T
            bindings = <&kp TAB>;
            timeout-ms = <COMBO_TERM_FAST>;
            require-prior-idle-ms = <COMBO_IDLE_FAST>;
        };

        combo_cut {
            key-positions = <21 23>;   // X V
            bindings = <&kp LC(X)>;
            timeout-ms = <COMBO_TERM_FAST>;
            require-prior-idle-ms = <COMBO_IDLE_FAST>;
        };

        combo_copy {
            key-positions = <21 22>;   // X C
            bindings = <&kp LC(INS)>;
            timeout-ms = <COMBO_TERM_FAST>;
            require-prior-idle-ms = <COMBO_IDLE_FAST>;
        };

        combo_paste {
            key-positions = <22 23>;   // C V
            bindings = <&kp LS(INS)>;
            timeout-ms = <COMBO_TERM_FAST>;
            require-prior-idle-ms = <COMBO_IDLE_FAST>;
        };

        // urob's horizontal combos - right hand
        combo_bspc {
            key-positions = <6 7>;     // L U
            bindings = <&kp BSPC>;
            timeout-ms = <COMBO_TERM_FAST>;
            require-prior-idle-ms = <COMBO_IDLE_FAST>;
        };

        combo_del {
            key-positions = <7 8>;     // U Y
            bindings = <&kp DEL>;
            timeout-ms = <COMBO_TERM_FAST>;
            require-prior-idle-ms = <COMBO_IDLE_FAST>;
        };

        combo_lpar {
            key-positions = <16 17>;   // N E
            bindings = <&kp LPAR>;
            timeout-ms = <COMBO_TERM_FAST>;
            require-prior-idle-ms = <COMBO_IDLE_FAST>;
        };

        combo_rpar {
            key-positions = <17 18>;   // E I
            bindings = <&kp RPAR>;
            timeout-ms = <COMBO_TERM_FAST>;
            require-prior-idle-ms = <COMBO_IDLE_FAST>;
        };

        combo_lbkt {
            key-positions = <26 27>;   // M ,
            bindings = <&kp LBKT>;
            timeout-ms = <COMBO_TERM_FAST>;
            require-prior-idle-ms = <COMBO_IDLE_FAST>;
        };

        combo_rbkt {
            key-positions = <27 28>;   // , .
            bindings = <&kp RBKT>;
            timeout-ms = <COMBO_TERM_FAST>;
            require-prior-idle-ms = <COMBO_IDLE_FAST>;
        };

        // urob's vertical combos - symbols (top row)
        combo_at {
            key-positions = <1 11>;    // W R
            bindings = <&kp AT>;
            timeout-ms = <COMBO_TERM_SLOW>;
            require-prior-idle-ms = <COMBO_IDLE_SLOW>;
        };

        combo_hash {
            key-positions = <2 12>;    // F S
            bindings = <&kp HASH>;
            timeout-ms = <COMBO_TERM_SLOW>;
            require-prior-idle-ms = <COMBO_IDLE_SLOW>;
        };

        combo_dllr {
            key-positions = <3 13>;    // P T
            bindings = <&kp DLLR>;
            timeout-ms = <COMBO_TERM_SLOW>;
            require-prior-idle-ms = <COMBO_IDLE_SLOW>;
        };

        combo_prcnt {
            key-positions = <4 14>;    // G D
            bindings = <&kp PRCNT>;
            timeout-ms = <COMBO_TERM_SLOW>;
            require-prior-idle-ms = <COMBO_IDLE_SLOW>;
        };

        combo_caret {
            key-positions = <5 15>;    // J H
            bindings = <&kp CARET>;
            timeout-ms = <COMBO_TERM_SLOW>;
            require-prior-idle-ms = <COMBO_IDLE_SLOW>;
        };

        combo_amps {
            key-positions = <6 16>;    // L N
            bindings = <&kp AMPS>;
            timeout-ms = <COMBO_TERM_SLOW>;
            require-prior-idle-ms = <COMBO_IDLE_SLOW>;
        };

        combo_star {
            key-positions = <7 17>;    // U E
            bindings = <&kp STAR>;
            timeout-ms = <COMBO_TERM_SLOW>;
            require-prior-idle-ms = <COMBO_IDLE_SLOW>;
        };

        combo_plus {
            key-positions = <8 18>;    // Y I
            bindings = <&kp PLUS>;
            timeout-ms = <COMBO_TERM_SLOW>;
            require-prior-idle-ms = <COMBO_IDLE_SLOW>;
        };

        // urob's vertical combos - symbols (bottom row)
        combo_grave {
            key-positions = <11 21>;   // R X
            bindings = <&kp GRAVE>;
            timeout-ms = <COMBO_TERM_SLOW>;
            require-prior-idle-ms = <COMBO_IDLE_SLOW>;
        };

        combo_bslh {
            key-positions = <12 22>;   // S C
            bindings = <&kp BSLH>;
            timeout-ms = <COMBO_TERM_SLOW>;
            require-prior-idle-ms = <COMBO_IDLE_SLOW>;
        };

        combo_equal {
            key-positions = <13 23>;   // T V
            bindings = <&kp EQUAL>;
            timeout-ms = <COMBO_TERM_SLOW>;
            require-prior-idle-ms = <COMBO_IDLE_SLOW>;
        };

        combo_tilde {
            key-positions = <14 24>;   // D B
            bindings = <&kp TILDE>;
            timeout-ms = <COMBO_TERM_SLOW>;
            require-prior-idle-ms = <COMBO_IDLE_SLOW>;
        };

        combo_under {
            key-positions = <15 25>;   // H K
            bindings = <&kp UNDER>;
            timeout-ms = <COMBO_TERM_SLOW>;
            require-prior-idle-ms = <COMBO_IDLE_SLOW>;
        };

        combo_minus {
            key-positions = <16 26>;   // N M
            bindings = <&kp MINUS>;
            timeout-ms = <COMBO_TERM_SLOW>;
            require-prior-idle-ms = <COMBO_IDLE_SLOW>;
        };

        combo_fslh {
            key-positions = <17 27>;   // E ,
            bindings = <&kp FSLH>;
            timeout-ms = <COMBO_TERM_SLOW>;
            require-prior-idle-ms = <COMBO_IDLE_SLOW>;
        };

        combo_pipe {
            key-positions = <18 28>;   // I .
            bindings = <&kp PIPE>;
            timeout-ms = <COMBO_TERM_SLOW>;
            require-prior-idle-ms = <COMBO_IDLE_SLOW>;
        };
    };

    keymap {
        compatible = "zmk,keymap";

        // BASE LAYER - urob's Colemak-DH with homerow mods
        base_layer {
            label = "BASE";
            bindings = <
        // ┌─────┬─────┬─────┬─────┬─────┐   ┌─────┬─────┬─────┬─────┬─────┐
             &kp Q &kp W &kp F &kp P &kp G     &kp J &kp L &kp U &kp Y &kp SQT
        // ├─────┼─────┼─────┼─────┼─────┤   ├─────┼─────┼─────┼─────┼─────┤
             &kp A &hml LALT R &hml LCTRL S &hml LSHFT T &hml LGUI D   &hmr LGUI H &hmr RSHFT N &hmr RCTRL E &hmr LALT I &kp O
        // ├─────┼─────┼─────┼─────┼─────┤   ├─────┼─────┼─────┼─────┼─────┤
             &kp Z &kp X &kp C &kp V &kp B     &kp K &kp M &comma_morph &dot_morph &qexcl
        // └─────┴─────┴─────┼─────┼─────┼─────┼─────┼─────┼─────┴─────┴─────┘
                           &lt_nav NAV DEL &bs_del &lt FN RET   &lt_spc NUM 0 &lt SYM ESC &magic_shift LSHFT 0
        //                 └─────┴─────┴─────┴─────┴─────┴─────┘
            >;
        };

        // NAVIGATION LAYER - urob's navigation with smart behaviors
        nav_layer {
            label = "NAV";
            bindings = <
        // ┌─────┬─────┬─────┬─────┬─────┐   ┌─────┬─────┬─────┬─────┬─────┐
             &kp LA(F4) &trans &kp LS(TAB) &kp TAB &trans   &kp PG_UP &kp HOME &kp UP &kp END &trans
        // ├─────┼─────┼─────┼─────┼─────┤   ├─────┼─────┼─────┼─────┼─────┤
             &sk LGUI &sk LALT &sk LSHFT &sk LCTRL &trans   &kp PG_DN &kp LEFT &kp DOWN &kp RIGHT &kp RET
        // ├─────┼─────┼─────┼─────┼─────┤   ├─────┼─────┼─────┼─────┼─────┤
             &trans &trans &trans &trans &trans   &kp INS &kp TAB &trans &trans &trans
        // └─────┴─────┴─────┼─────┼─────┼─────┼─────┼─────┼─────┴─────┴─────┘
                           &trans &trans &trans   &trans &trans &kp K_CANCEL
        //                 └─────┴─────┴─────┴─────┴─────┴─────┘
            >;
        };

        // NUMBER LAYER - urob's number layout
        num_layer {
            label = "NUM";
            bindings = <
        // ┌─────┬─────┬─────┬─────┬─────┐   ┌─────┬─────┬─────┬─────┬─────┐
             &trans &kp N7 &kp N8 &kp N9 &trans   &trans &trans &trans &trans &trans
        // ├─────┼─────┼─────┼─────┼─────┤   ├─────┼─────┼─────┼─────┼─────┤
             &hml LGUI N0 &hml LALT N4 &hml LCTRL N5 &hml LSHFT N6 &trans   &trans &trans &trans &trans &trans
        // ├─────┼─────┼─────┼─────┼─────┤   ├─────┼─────┼─────┼─────┼─────┤
             &trans &kp N1 &kp N2 &kp N3 &trans   &trans &trans &trans &trans &trans
        // └─────┴─────┴─────┼─────┼─────┼─────┼─────┼─────┼─────┴─────┴─────┘
                           &trans &trans &trans   &trans &trans &trans
        //                 └─────┴─────┴─────┴─────┴─────┴─────┘
            >;
        };

        // SYMBOL LAYER - urob's symbol layout
        sym_layer {
            label = "SYM";
            bindings = <
        // ┌─────┬─────┬─────┬─────┬─────┐   ┌─────┬─────┬─────┬─────┬─────┐
             &kp EXCL &kp AT &kp HASH &kp DLLR &kp PRCNT   &kp CARET &kp AMPS &kp STAR &kp LPAR &kp RPAR
        // ├─────┼─────┼─────┼─────┼─────┤   ├─────┼─────┼─────┼─────┼─────┤
             &kp GRAVE &kp MINUS &kp PLUS &kp EQUAL &kp COLON   &kp PIPE &kp LBRC &kp RBRC &kp LBKT &kp RBKT
        // ├─────┼─────┼─────┼─────┼─────┤   ├─────┼─────┼─────┼─────┼─────┤
             &kp TILDE &kp UNDER &kp BSLH &kp FSLH &kp SEMI   &kp LT &kp GT &kp SQT &kp DQT &kp QMARK
        // └─────┴─────┴─────┼─────┼─────┼─────┼─────┼─────┼─────┴─────┴─────┘
                           &trans &trans &trans   &trans &trans &trans
        //                 └─────┴─────┴─────┴─────┴─────┴─────┘
            >;
        };

        // FUNCTION LAYER - urob's function and media keys
        fn_layer {
            label = "FN";
            bindings = <
        // ┌─────┬─────┬─────┬─────┬─────┐   ┌─────┬─────┬─────┬─────┬─────┐
             &kp F12 &kp F7 &kp F8 &kp F9 &trans   &trans &kp C_PREV &kp C_VOL_UP &kp C_NEXT &trans
        // ├─────┼─────┼─────┼─────┼─────┤   ├─────┼─────┼─────┼─────┼─────┤
             &hml LGUI F11 &hml LALT F4 &hml LCTRL F5 &hml LSHFT F6 &trans   &trans &trans &kp C_VOL_DN &trans &trans
        // ├─────┼─────┼─────┼─────┼─────┤   ├─────┼─────┼─────┼─────┼─────┤
             &kp F10 &kp F1 &kp F2 &kp F3 &trans   &trans &trans &trans &trans &trans
        // └─────┴─────┴─────┼─────┼─────┼─────┼─────┼─────┼─────┴─────┴─────┘
                           &trans &trans &trans   &kp C_MUTE &kp C_PP &trans
        //                 └─────┴─────┴─────┴─────┴─────┴─────┘
            >;
        };

        // SYSTEM LAYER - urob's system controls
        sys_layer {
            label = "SYS";
            bindings = <
        // ┌─────┬─────┬─────┬─────┬─────┐   ┌─────┬─────┬─────┬─────┬─────┐
             &bt BT_SEL 0 &bt BT_SEL 1 &bt BT_SEL 2 &bt BT_SEL 3 &bt BT_CLR   &trans &trans &trans &trans &trans
        // ├─────┼─────┼─────┼─────┼─────┤   ├─────┼─────┼─────┼─────┼─────┤
             &trans &trans &trans &trans &trans   &trans &trans &trans &trans &trans
        // ├─────┼─────┼─────┼─────┼─────┤   ├─────┼─────┼─────┼──────────┤
             &trans &trans &trans &bootloader &sys_reset   &sys_reset &bootloader &trans &trans &trans
        // └─────┴─────┴─────┼─────┼─────┼─────┼─────┼─────┼─────┴─────┴─────┘
                           &trans &trans &trans   &trans &trans &trans
        //                 └─────┴─────┴─────┴─────┴─────┴─────┘
            >;
        };
    };

    // urob's conditional layers
    conditional_layers {
        compatible = "zmk,conditional-layers";
        tri_layer {
            if-layers = <FN NUM>;
            then-layer = <SYS>;
        };
    };
};
