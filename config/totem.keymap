/*
 * TOTEM KEYBOARD - Editor-Compatible Version
 * Optimized combos + clean layers
 */

#include <behaviors.dtsi>
#include <dt-bindings/zmk/keys.h>

#define BASE 0
#define NUM  1
#define SYM  2
#define NAV  3
#define KEYS_L 0 1 2 3 4 5 12 13 14 15 16 17 24 25 26 27 28 29
#define KEYS_R 6 7 8 9 10 11 18 19 20 21 22 23 30 31 32 33 34 35
#define THUMBS 36 37 38 39

/ {
    behaviors {
        hml: homerow_left {
            compatible = "zmk,behavior-hold-tap";
            label = "HOMEROW_LEFT";
            #binding-cells = <2>;
            flavor = "balanced";
            tapping-term-ms = <280>;
            quick-tap-ms = <175>;
            require-prior-idle-ms = <150>;
            bindings = <&kp>, <&kp>;

            hold-trigger-key-positions = <KEYS_R THUMBS>;
            hold-trigger-on-release;
        };

        hmr: homerow_right {
            compatible = "zmk,behavior-hold-tap";
            label = "HOMEROW_RIGHT";
            #binding-cells = <2>;
            flavor = "balanced";
            tapping-term-ms = <280>;
            quick-tap-ms = <175>;
            require-prior-idle-ms = <150>;
            bindings = <&kp>, <&kp>;

            hold-trigger-key-positions = <KEYS_L THUMBS>;
            hold-trigger-on-release;
        };
    };

    combos {
        compatible = "zmk,combos";

        // Essential keys

        combo_esc {
            key-positions = <14 15>;
            bindings = <&kp ESC>;
            timeout-ms = <50>;
            require-prior-idle-ms = <150>;
        };

        combo_tab {
            key-positions = <15 16>;
            bindings = <&kp TAB>;
            timeout-ms = <50>;
            require-prior-idle-ms = <150>;
        };

        // Symbols

        combo_equal {
            key-positions = <6 7>;
            bindings = <&kp EQUAL>;
            timeout-ms = <50>;
            require-prior-idle-ms = <150>;
        };

        combo_minus {
            key-positions = <7 8>;
            bindings = <&kp MINUS>;
            timeout-ms = <50>;
            require-prior-idle-ms = <150>;
        };

        combo_plus {
            key-positions = <31 32>;
            bindings = <&kp PLUS>;
            timeout-ms = <50>;
            require-prior-idle-ms = <150>;
        };

        combo_under {
            key-positions = <28 29>;
            bindings = <&kp UNDER>;
            timeout-ms = <50>;
            require-prior-idle-ms = <150>;
        };

        combo_star {
            key-positions = <30 31>;
            bindings = <&kp STAR>;
            timeout-ms = <50>;
            require-prior-idle-ms = <150>;
        };

        combo_colon {
            key-positions = <8 9>;
            bindings = <&kp COLON>;
            timeout-ms = <50>;
            require-prior-idle-ms = <150>;
        };

        combo_semi {
            key-positions = <32 33>;
            bindings = <&kp SEMI>;
            timeout-ms = <50>;
            require-prior-idle-ms = <150>;
        };

        // Brackets

        combo_lpar {
            key-positions = <19 20>;
            bindings = <&kp LPAR>;
            timeout-ms = <50>;
            require-prior-idle-ms = <150>;
        };

        combo_rpar {
            key-positions = <20 21>;
            bindings = <&kp RPAR>;
            timeout-ms = <50>;
            require-prior-idle-ms = <150>;
        };

        combo_lbkt {
            key-positions = <18 19>;
            bindings = <&kp LBKT>;
            timeout-ms = <50>;
            require-prior-idle-ms = <150>;
        };

        combo_rbkt {
            key-positions = <21 22>;
            bindings = <&kp RBKT>;
            timeout-ms = <50>;
            require-prior-idle-ms = <150>;
        };

        combo_lbrc {
            key-positions = <32 34>;
            bindings = <&kp LBRC>;
            timeout-ms = <50>;
            require-prior-idle-ms = <150>;
        };

        combo_rbrc {
            key-positions = <33 34>;
            bindings = <&kp RBRC>;
            timeout-ms = <50>;
            require-prior-idle-ms = <150>;
        };

        // Clipboard

        combo_copy {
            key-positions = <27 30>;
            bindings = <&kp LC(C)>;
            timeout-ms = <50>;
            require-prior-idle-ms = <150>;
        };

        combo_paste {
            key-positions = <28 30>;
            bindings = <&kp LC(V)>;
            timeout-ms = <50>;
            require-prior-idle-ms = <150>;
        };

        combo_cut {
            key-positions = <26 30>;
            bindings = <&kp LC(X)>;
            timeout-ms = <50>;
            require-prior-idle-ms = <150>;
        };

        // Caps word

        combo_caps {
            key-positions = <16 19>;
            bindings = <&caps_word>;
            timeout-ms = <50>;
        };
    };

    keymap {
        compatible = "zmk,keymap";

        base_layer {
            label = "BASE";
            bindings = <
         &kp Q  &kp W            &kp F         &kp P         &kp G              &kp J                 &kp L         &kp U         &kp Y             &kp SEMI
         &kp A  &hml LEFT_ALT R  &hml LCTRL S  &hml LSHFT T  &hml LEFT_GUI D    &hmr RIGHT_COMMAND H  &hmr RSHFT N  &hmr RCTRL E  &hmr RIGHT_ALT I  &kp O
&kp ESC  &kp Z  &kp X            &kp C         &kp V         &kp B              &kp K                 &kp M         &kp COMMA     &kp DOT           &kp FSLH  &kp DOUBLE_QUOTES
                                 &mo NAV       &mo NUM       &kp BSPC           &kp SPACE             &mo SYM       &kp RET
            >;
        };

        num_layer {
            label = "NUM";
            bindings = <
        &kp N1    &kp N2  &kp N3  &kp N4  &kp N5       &kp N6     &kp N7  &kp N8  &kp N9  &kp N0
        &kp FSLH  &kp N7  &kp N8  &kp N9  &kp MINUS    &kp EQUAL  &kp N4  &kp N5  &kp N6  &kp PLUS
&trans  &kp STAR  &kp N1  &kp N2  &kp N3  &kp DOT      &kp N0     &kp N1  &kp N2  &kp N3  &kp DOT   &trans
                          &trans  &trans  &kp N0       &kp COMMA
            >;
        };

        sym_layer {
            label = "SYM";
            bindings = <
        &kp EXCL   &kp AT     &kp HASH  &kp DLLR   &kp PRCNT    &kp CARET  &kp AMPS  &kp STAR  &kp LPAR   &kp RPAR
        &kp EQUAL  &kp MINUS  &kp PLUS  &kp UNDER  &kp COLON    &kp PIPE   &kp LBRC  &kp RBRC  &kp LBKT   &kp RBKT
&trans  &kp GRAVE  &kp TILDE  &kp LT    &kp GT     &kp BSLH     &kp FSLH   &kp SQT   &kp DQT   &kp QMARK  &kp SEMI  &trans
                              &kp F1    &kp F2     &kp F3       &trans
            >;
        };

        nav_layer {
            label = "NAV";
            bindings = <
        &kp F1    &kp F2    &kp F3     &kp F4     &kp F5     &kp HOME      &kp PG_DN     &kp PG_UP   &kp END        &kp DEL
        &kp LGUI  &kp LALT  &kp LCTRL  &kp LSHFT  &kp F6     &kp LEFT      &kp DOWN      &kp UP      &kp RIGHT      &kp BSPC
&trans  &kp F7    &kp F8    &kp F9     &kp F10    &kp F11    &kp LC(LEFT)  &kp LC(DOWN)  &kp LC(UP)  &kp LC(RIGHT)  &kp INS   &kp F12
                            &trans     &trans     &kp RET    &trans
            >;
        };
    };
};
