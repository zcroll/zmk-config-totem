/*
 * ULTIMATE TOTEM CONFIGURATION - Based on YOUR Colemak-DH Layout
 * Your exact letter layout + urob's timeless mods + Programming optimizations
 * Optimized for: Python, JavaScript, C/C++, Rust, Go, Java, Shell scripting, LazyVim, terminal work
 */

#include <behaviors.dtsi>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/outputs.h>

// Layer definitions
#define BASE 0
#define SYM  1  // Symbols - Programming optimized
#define NUM  2  // Numbers + Navigation
#define FUN  3  // Functions + System

// Totem 38-key positions
#define KEYS_L  0  1  2  3  4  5 12 13 14 15 16 17 24 25 26 27 28 29
#define KEYS_R  6  7  8  9 10 11 18 19 20 21 22 23 30 31 32 33 34 35
#define THUMBS 36 37 38 39

/ {
    behaviors {
        // UROB'S TIMELESS HOMEROW MODS - Industry Best Practice
        hml: homerow_mod_left {
            compatible = "zmk,behavior-hold-tap";
            #binding-cells = <2>;
            flavor = "balanced";
            tapping-term-ms = <280>;
            quick-tap-ms = <175>;
            require-prior-idle-ms = <150>;
            bindings = <&kp>, <&kp>;
            hold-trigger-key-positions = <KEYS_R THUMBS>;
            hold-trigger-on-release;
        };

        hmr: homerow_mod_right {
            compatible = "zmk,behavior-hold-tap";
            #binding-cells = <2>;
            flavor = "balanced";
            tapping-term-ms = <280>;
            quick-tap-ms = <175>;
            require-prior-idle-ms = <150>;
            bindings = <&kp>, <&kp>;
            hold-trigger-key-positions = <KEYS_L THUMBS>;
            hold-trigger-on-release;
        };

        // OPTIMAL THUMB BEHAVIORS - Based on 36-key research
        lt_space: layer_tap_space {
            compatible = "zmk,behavior-hold-tap";
            #binding-cells = <2>;
            flavor = "balanced";
            tapping-term-ms = <200>;
            quick-tap-ms = <125>;
            global-quick-tap;
            bindings = <&mo>, <&smart_space>;
        };

        lt_bspc: layer_tap_backspace {
            compatible = "zmk,behavior-hold-tap";
            #binding-cells = <2>;
            flavor = "tap-preferred";
            tapping-term-ms = <200>;
            quick-tap-ms = <150>;
            bindings = <&mo>, <&kp>;
        };

        // SMART SPACE - Repeat after letters, space otherwise (urob-style)
        smart_space: smart_space_repeat {
            compatible = "zmk,behavior-mod-morph";
            #binding-cells = <0>;
            bindings = <&kp SPACE>, <&key_repeat>;
            mods = <(MOD_LSFT|MOD_RSFT)>;
            keep-mods = <(MOD_RSFT)>;
        };

        // SMART SHIFT - Sticky shift, caps word on double-tap
        smart_shift: smart_shift_caps {
            compatible = "zmk,behavior-mod-morph";
            #binding-cells = <0>;
            bindings = <&sk LSHFT>, <&caps_word>;
            mods = <(MOD_LSFT)>;
        };
    };

    combos {
        compatible = "zmk,combos";

        // PROGRAMMING BRACKETS - Based on YOUR Colemak-DH positions
        combo_parens {
            timeout-ms = <50>;
            key-positions = <19 20>; // N+E (Colemak home row)
            bindings = <&bracket_pair LPAR RPAR>;
            require-prior-idle-ms = <150>;
        };
        
        combo_brackets {
            timeout-ms = <50>;
            key-positions = <20 21>; // E+I (Colemak)
            bindings = <&bracket_pair LBKT RBKT>;
            require-prior-idle-ms = <150>;
        };
        
        combo_braces {
            timeout-ms = <50>;
            key-positions = <21 22>; // I+O (Colemak)
            bindings = <&bracket_pair LBRC RBRC>;
            require-prior-idle-ms = <150>;
        };

        combo_angle_brackets {
            timeout-ms = <50>;
            key-positions = <18 19>; // H+N (for C++ templates, Rust generics)
            bindings = <&bracket_pair LT GT>;
            require-prior-idle-ms = <150>;
        };

        // COLEMAK-OPTIMIZED SYMBOL COMBOS
        combo_semicolon {
            timeout-ms = <50>;
            key-positions = <8 9>; // U+Y (natural flow in Colemak)
            bindings = <&kp SEMI>;
            require-prior-idle-ms = <150>;
        };

        combo_colon {
            timeout-ms = <50>;
            key-positions = <7 8>; // L+U (Python dictionaries)
            bindings = <&kp COLON>;
            require-prior-idle-ms = <150>;
        };

        combo_equal {
            timeout-ms = <50>;
            key-positions = <6 7>; // J+L (assignment operator)
            bindings = <&kp EQUAL>;
            require-prior-idle-ms = <150>;
        };

        combo_underscore {
            timeout-ms = <50>;
            key-positions = <28 29>; // V+B (snake_case variables)
            bindings = <&kp UNDER>;
            require-prior-idle-ms = <150>;
        };

        combo_minus {
            timeout-ms = <50>;
            key-positions = <27 28>; // V+B area (subtraction)
            bindings = <&kp MINUS>;
            require-prior-idle-ms = <150>;
        };

        combo_plus {
            timeout-ms = <50>;
            key-positions = <31 32>; // M+comma (addition)
            bindings = <&kp PLUS>;
            require-prior-idle-ms = <150>;
        };

        // PYTHON-SPECIFIC OPTIMIZATIONS (Colemak positions)
        combo_dunder {
            timeout-ms = <50>;
            key-positions = <26 27>; // C+V (Python __init__, __main__)
            bindings = <&double_under>;
            require-prior-idle-ms = <150>;
        };

        combo_arrow_func {
            timeout-ms = <50>;
            key-positions = <33 34>; // dot+slash (JS/Python =>)
            bindings = <&arrow_func>;
            require-prior-idle-ms = <150>;
        };

        combo_not_equal {
            timeout-ms = <50>;
            key-positions = <2 3>; // W+F (!=) - easy reach in Colemak
            bindings = <&not_equal>;
            require-prior-idle-ms = <150>;
        };

        // VIM/LAZYVIM ESSENTIALS (Colemak optimized)
        combo_esc {
            timeout-ms = <50>;
            key-positions = <14 15>; // R+S (quick escape - Colemak home)
            bindings = <&kp ESC>;
            require-prior-idle-ms = <150>;
        };

        combo_tab {
            timeout-ms = <50>;
            key-positions = <15 16>; // S+T (completion - Colemak home)
            bindings = <&kp TAB>;
            require-prior-idle-ms = <150>;
        };

        // DEVELOPER WORKFLOW (Colemak positions)
        combo_copy {
            timeout-ms = <50>;
            key-positions = <26 29>; // C+K (Ctrl+C)
            bindings = <&kp LC(C)>;
            require-prior-idle-ms = <150>;
        };

        combo_paste {
            timeout-ms = <50>;
            key-positions = <28 30>; // V+K (Ctrl+V)
            bindings = <&kp LC(V)>;
            require-prior-idle-ms = <150>;
        };

        combo_caps_word {
            timeout-ms = <50>;
            key-positions = <16 20>; // T+E (for CONSTANTS)
            bindings = <&caps_word>;
        };
    };

    macros {
        // SMART BRACKET PAIRS - Auto-cursor positioning
        bracket_pair: bracket_pair {
            compatible = "zmk,behavior-macro-two-param";
            #binding-cells = <2>;
            bindings = <&macro_param_1to1>, <&kp MACRO_PLACEHOLDER>,
                       <&macro_param_2to1>, <&kp MACRO_PLACEHOLDER>,
                       <&kp LEFT>;
        };

        // PYTHON ESSENTIALS
        double_under: double_under {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp UNDER &kp UNDER>;
        };

        // MODERN JAVASCRIPT/PYTHON
        arrow_func: arrow_func {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp EQUAL &kp GT>;
        };

        // COMPARISON OPERATORS
        not_equal: not_equal {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp EXCL &kp EQUAL>;
        };

        // SHELL/TERMINAL
        pipe_pipe: pipe_pipe {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp PIPE &kp PIPE>;
        };

        amp_amp: amp_amp {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp AMPS &kp AMPS>;
        };
    };

    keymap {
        compatible = "zmk,keymap";

        // ===================================================================
        // LAYER 0: YOUR EXACT COLEMAK-DH LAYOUT with timeless HRMs
        // ===================================================================
        base_layer {
            display-name = "Base";
            bindings = <
        // ╭─────────────┬─────────────┬─────────────┬─────────────┬─────────────┬─────────────╮   ╭─────────────┬─────────────┬─────────────┬─────────────┬─────────────┬─────────────╮
             &kp TAB       &kp Q         &kp W         &kp F         &kp P         &kp G             &kp J         &kp L         &kp U         &kp Y         &kp SEMI      &kp BSLH
        // ├─────────────┼─────────────┼─────────────┼─────────────┼─────────────┼─────────────┤   ├─────────────┼─────────────┼─────────────┼─────────────┼─────────────┼─────────────┤
             &kp ESC       &hml LGUI A   &hml LALT R   &hml LSHFT S  &hml LCTRL T  &kp D             &kp H         &hmr RCTRL N  &hmr RSHFT E  &hmr LALT I   &hmr RGUI O   &kp SQT
        // ├─────────────┼─────────────┼─────────────┼─────────────┼─────────────┼─────────────┤   ├─────────────┼─────────────┼─────────────┼─────────────┼─────────────┼─────────────┤
             &kp LCTRL     &kp Z         &kp X         &kp C         &kp V         &kp B             &kp K         &kp M         &kp COMMA     &kp DOT       &kp FSLH      &kp RSHFT
        // ╰─────────────┴─────────────┴─────────────┼─────────────┼─────────────┤                 ├─────────────┼─────────────┼─────────────┴─────────────┴─────────────╯
                                                       &mo FUN       &lt_space SYM SPACE             &lt_bspc NUM BSPC   &smart_shift
        //                                           ╰─────────────┴─────────────╯                 ╰─────────────┴─────────────╯
            >;
        };

        // ===================================================================
        // LAYER 1: SYMBOLS - Global programming symbols, frequency optimized
        // ===================================================================
        symbol_layer {
            display-name = "Sym";
            bindings = <
        // ╭─────────────┬─────────────┬─────────────┬─────────────┬─────────────┬─────────────╮   ╭─────────────┬─────────────┬─────────────┬──────────────────────────┬─────────────╮
             &trans        &kp EXCL      &kp AT        &kp HASH      &kp DLLR      &kp PRCNT         &kp CARET     &kp AMPS      &kp STAR      &kp LPAR      &kp RPAR      &trans
        // ├─────────────┼─────────────┼─────────────┼─────────────┼─────────────┼─────────────┤   ├─────────────┼─────────────┼─────────────┼─────────────┼─────────────┼─────────────┤
             &trans        &kp COLON     &kp SQT       &kp DQT       &kp UNDER     &kp MINUS         &kp EQUAL     &kp LBKT      &kp RBKT      &kp LBRC      &kp RBRC      &kp PIPE
        // ├─────────────┼─────────────┼─────────────┼─────────────┼─────────────┼─────────────┤   ├─────────────┼─────────────┼─────────────┼─────────────┼─────────────┼─────────────┤
             &trans        &kp GRAVE     &kp TILDE     &kp LT        &kp GT        &kp PLUS          &kp BSLH      &kp FSLH      &kp QMARK     &amp_amp      &pipe_pipe    &trans
        // ╰─────────────┴─────────────┴─────────────┼─────────────┼─────────────┤                 ├─────────────┼─────────────┼─────────────┴─────────────┴─────────────╯
                                                       &trans        &trans                          &kp DEL       &trans
        //                                           ╰─────────────┴─────────────╯                 ╰─────────────┴─────────────╯
            >;
        };

        // ===================================================================
        // LAYER 2: NUMBERS + NAVIGATION - Programming workflow optimized
        // ===================================================================
        number_layer {
            display-name = "Num";
            bindings = <
        // ╭─────────────┬─────────────┬─────────────┬─────────────┬─────────────┬─────────────╮   ╭─────────────┬─────────────┬─────────────┬─────────────┬─────────────┬─────────────╮
             &trans        &kp N1        &kp N2        &kp N3        &kp N4        &kp N5            &kp N6        &kp N7        &kp N8        &kp N9        &kp N0        &trans
        // ├─────────────┼─────────────┼─────────────┼─────────────┼─────────────┼─────────────┤   ├─────────────┼─────────────┼─────────────┼─────────────┼─────────────┼─────────────┤
             &trans        &kp LEFT      &kp DOWN      &kp UP        &kp RIGHT     &kp HOME          &kp END       &kp N4        &kp N5        &kp N6        &kp MINUS     &kp PLUS
        // ├─────────────┼─────────────┼─────────────┼─────────────┼─────────────┼─────────────┤   ├─────────────┼─────────────┼─────────────┼─────────────┼─────────────┼─────────────┤
             &trans        &kp PG_UP     &kp PG_DN     &kp LC(LEFT)  &kp LC(RIGHT) &kp LC(HOME)      &kp LC(END)   &kp N1        &kp N2        &kp N3        &kp DOT       &trans
        // ╰─────────────┴─────────────┴─────────────┼─────────────┼─────────────┤                 ├─────────────┼─────────────┼─────────────┴─────────────┴─────────────╯
                                                       &kp N0        &kp SPACE                       &trans        &kp N0
        //                                           ╰─────────────┴─────────────╯                 ╰─────────────┴─────────────╯
            >;
        };

        // ===================================================================
        // LAYER 3: FUNCTIONS + SYSTEM - Complete system control
        // ===================================================================
        function_layer {
            display-name = "Fn";
            bindings = <
        // ╭─────────────┬─────────────┬─────────────┬─────────────┬─────────────┬─────────────╮   ╭─────────────┬─────────────┬─────────────┬─────────────┬─────────────┬─────────────╮
             &trans        &kp F1        &kp F2        &kp F3        &kp F4        &kp F5            &kp F6        &kp F7        &kp F8        &kp F9        &kp F10       &trans
        // ├─────────────┼─────────────┼─────────────┼─────────────┼─────────────┼─────────────┤   ├─────────────┼─────────────┼─────────────┼─────────────┼─────────────┼─────────────┤
             &trans        &bt BT_SEL 0  &bt BT_SEL 1  &bt BT_SEL 2  &bt BT_SEL 3  &bt BT_CLR        &kp C_PREV    &kp C_VOL_DN  &kp C_VOL_UP  &kp C_NEXT    &kp F11       &kp F12
        // ├─────────────┼─────────────┼─────────────┼─────────────┼─────────────┼─────────────┤   ├─────────────┼─────────────┼─────────────┼─────────────┼─────────────┼─────────────┤
             &trans        &out OUT_USB  &out OUT_BLE  &trans        &trans        &sys_reset        &sys_reset    &kp C_BRI_DN  &kp C_BRI_UP  &kp C_PP      &bootloader   &trans
        // ╰─────────────┴─────────────┴─────────────┼─────────────┼─────────────┤                 ├─────────────┼─────────────┼─────────────┴─────────────┴─────────────╯
                                                       &trans        &trans                          &trans        &trans
        //                                           ╰─────────────┴─────────────╯                 ╰─────────────┴─────────────╯
            >;
        };
    };

    conditional_layers {
        compatible = "zmk,conditional-layers";
        
        // Auto-activate function layer when both symbol and number are pressed
        tri_layer {
            if-layers = <SYM NUM>;
            then-layer = <FUN>;
        };
    };
};
