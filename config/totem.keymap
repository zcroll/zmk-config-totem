/*
 * TOTEM KEYBOARD - Optimized with Rich Combos
 * Maximum speed with comprehensive symbol combos
 * Optimized layers for coding workflow
 */

#include <behaviors.dtsi>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/outputs.h>

#define BASE 0
#define NUM  1
#define SYM  2
#define NAV  3
#define FUN  4

#define KEYS_L 0 1 2 3 4 5 12 13 14 15 16 17 24 25 26 27 28 29
#define KEYS_R 6 7 8 9 10 11 18 19 20 21 22 23 30 31 32 33 34 35
#define THUMBS 36 37 38 39

/ {
    behaviors {
        hml: homerow_left {
            compatible = "zmk,behavior-hold-tap";
            #binding-cells = <2>;
            flavor = "balanced";
            tapping-term-ms = <280>;
            quick-tap-ms = <175>;
            require-prior-idle-ms = <150>;
            bindings = <&kp>, <&kp>;
            hold-trigger-key-positions = <KEYS_R THUMBS>;
            hold-trigger-on-release;
        };

        hmr: homerow_right {
            compatible = "zmk,behavior-hold-tap";
            #binding-cells = <2>;
            flavor = "balanced";
            tapping-term-ms = <280>;
            quick-tap-ms = <175>;
            require-prior-idle-ms = <150>;
            bindings = <&kp>, <&kp>;
            hold-trigger-key-positions = <KEYS_L THUMBS>;
            hold-trigger-on-release;
        };
    };

    combos {
        compatible = "zmk,combos";

        // ========== ESSENTIAL KEYS ==========
        combo_esc {
            timeout-ms = <50>;
            key-positions = <14 15>; // R+S → ESC
            bindings = <&kp ESC>;
            require-prior-idle-ms = <150>;
        };

        combo_tab {
            timeout-ms = <50>;
            key-positions = <15 16>; // S+T → TAB
            bindings = <&kp TAB>;
            require-prior-idle-ms = <150>;
        };

        combo_del {
            timeout-ms = <50>;
            key-positions = <9 10>; // Y+; → DEL
            bindings = <&kp DEL>;
            require-prior-idle-ms = <150>;
        };

        // ========== BRACKETS (with cursor inside) ==========
        combo_parens {
            timeout-ms = <50>;
            key-positions = <19 20>; // N+E → ()
            bindings = <&macro_parens>;
            require-prior-idle-ms = <150>;
        };

        combo_brackets {
            timeout-ms = <50>;
            key-positions = <20 21>; // E+I → []
            bindings = <&macro_brackets>;
            require-prior-idle-ms = <150>;
        };

        combo_braces {
            timeout-ms = <50>;
            key-positions = <21 22>; // I+O → {}
            bindings = <&macro_braces>;
            require-prior-idle-ms = <150>;
        };

        combo_angle {
            timeout-ms = <50>;
            key-positions = <18 19>; // H+N → <>
            bindings = <&macro_angle>;
            require-prior-idle-ms = <150>;
        };

        // ========== MOST FREQUENT SYMBOLS ==========
        combo_equal {
            timeout-ms = <50>;
            key-positions = <6 7>; // J+L → =
            bindings = <&kp EQUAL>;
            require-prior-idle-ms = <150>;
        };

        combo_minus {
            timeout-ms = <50>;
            key-positions = <7 8>; // L+U → -
            bindings = <&kp MINUS>;
            require-prior-idle-ms = <150>;
        };

        combo_plus {
            timeout-ms = <50>;
            key-positions = <31 32>; // M+, → +
            bindings = <&kp PLUS>;
            require-prior-idle-ms = <150>;
        };

        combo_under {
            timeout-ms = <50>;
            key-positions = <28 29>; // V+B → _
            bindings = <&kp UNDER>;
            require-prior-idle-ms = <150>;
        };

        combo_star {
            timeout-ms = <50>;
            key-positions = <30 31>; // K+M → *
            bindings = <&kp STAR>;
            require-prior-idle-ms = <150>;
        };

        // ========== PUNCTUATION ==========
        combo_colon {
            timeout-ms = <50>;
            key-positions = <8 9>; // U+Y → :
            bindings = <&kp COLON>;
            require-prior-idle-ms = <150>;
        };

        combo_semi {
            timeout-ms = <50>;
            key-positions = <32 33>; // ,+. → ;
            bindings = <&kp SEMI>;
            require-prior-idle-ms = <150>;
        };

        combo_excl {
            timeout-ms = <50>;
            key-positions = <1 2>; // W+F → !
            bindings = <&kp EXCL>;
            require-prior-idle-ms = <150>;
        };

        combo_qmark {
            timeout-ms = <50>;
            key-positions = <33 34>; // .+/ → ?
            bindings = <&kp QMARK>;
            require-prior-idle-ms = <150>;
        };

        // ========== QUOTES ==========
        combo_sqt {
            timeout-ms = <50>;
            key-positions = <7 9>; // L+Y → '
            bindings = <&kp SQT>;
            require-prior-idle-ms = <150>;
        };

        combo_dqt {
            timeout-ms = <50>;
            key-positions = <8 10>; // U+; → "
            bindings = <&kp DQT>;
            require-prior-idle-ms = <150>;
        };

        combo_grave {
            timeout-ms = <50>;
            key-positions = <0 1>; // Q+W → `
            bindings = <&kp GRAVE>;
            require-prior-idle-ms = <150>;
        };

        combo_tilde {
            timeout-ms = <50>;
            key-positions = <1 13>; // W+X → ~
            bindings = <&kp TILDE>;
            require-prior-idle-ms = <150>;
        };

        // ========== OPERATORS ==========
        combo_pipe {
            timeout-ms = <50>;
            key-positions = <18 31>; // H+M → |
            bindings = <&kp PIPE>;
            require-prior-idle-ms = <150>;
        };

        combo_amps {
            timeout-ms = <50>;
            key-positions = <6 18>; // J+H → &
            bindings = <&kp AMPS>;
            require-prior-idle-ms = <150>;
        };

        combo_at {
            timeout-ms = <50>;
            key-positions = <2 3>; // F+P → @
            bindings = <&kp AT>;
            require-prior-idle-ms = <150>;
        };

        combo_hash {
            timeout-ms = <50>;
            key-positions = <3 4>; // P+G → #
            bindings = <&kp HASH>;
            require-prior-idle-ms = <150>;
        };

        combo_dllr {
            timeout-ms = <50>;
            key-positions = <4 5>; // G+B → $
            bindings = <&kp DLLR>;
            require-prior-idle-ms = <150>;
        };

        combo_prcnt {
            timeout-ms = <50>;
            key-positions = <2 4>; // F+G → %
            bindings = <&kp PRCNT>;
            require-prior-idle-ms = <150>;
        };

        combo_caret {
            timeout-ms = <50>;
            key-positions = <6 8>; // J+U → ^
            bindings = <&kp CARET>;
            require-prior-idle-ms = <150>;
        };

        // ========== PROGRAMMING PATTERNS ==========
        combo_double_equal {
            timeout-ms = <50>;
            key-positions = <6 19>; // J+N → ==
            bindings = <&macro_double_equal>;
            require-prior-idle-ms = <150>;
        };

        combo_not_equal {
            timeout-ms = <50>;
            key-positions = <1 3>; // W+P → !=
            bindings = <&macro_not_equal>;
            require-prior-idle-ms = <150>;
        };

        combo_arrow {
            timeout-ms = <50>;
            key-positions = <32 34>; // ,+/ → =>
            bindings = <&macro_arrow>;
            require-prior-idle-ms = <150>;
        };

        combo_dunder {
            timeout-ms = <50>;
            key-positions = <26 28>; // X+V → __
            bindings = <&macro_dunder>;
            require-prior-idle-ms = <150>;
        };

        combo_double_slash {
            timeout-ms = <50>;
            key-positions = <33 35>; // ./APOS → //
            bindings = <&macro_double_slash>;
            require-prior-idle-ms = <150>;
        };

        // ========== CLIPBOARD ==========
        combo_copy {
            timeout-ms = <50>;
            key-positions = <27 30>; // C+K → Ctrl+C
            bindings = <&kp LC(C)>;
            require-prior-idle-ms = <150>;
        };

        combo_paste {
            timeout-ms = <50>;
            key-positions = <28 30>; // V+K → Ctrl+V
            bindings = <&kp LC(V)>;
            require-prior-idle-ms = <150>;
        };

        combo_cut {
            timeout-ms = <50>;
            key-positions = <26 30>; // X+K → Ctrl+X
            bindings = <&kp LC(X)>;
            require-prior-idle-ms = <150>;
        };

        combo_undo {
            timeout-ms = <50>;
            key-positions = <25 26>; // Z+X → Ctrl+Z
            bindings = <&kp LC(Z)>;
            require-prior-idle-ms = <150>;
        };

        combo_redo {
            timeout-ms = <50>;
            key-positions = <25 27>; // Z+C → Ctrl+Y
            bindings = <&kp LC(Y)>;
            require-prior-idle-ms = <150>;
        };

        // ========== SPECIAL KEYS ==========
        combo_caps {
            timeout-ms = <50>;
            key-positions = <16 19>; // T+H → CAPS_WORD
            bindings = <&caps_word>;
        };

        combo_bslh {
            timeout-ms = <50>;
            key-positions = <29 30>; // B+K → \
            bindings = <&kp BSLH>;
            require-prior-idle-ms = <150>;
        };
    };

    macros {
        macro_parens: macro_parens {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp LPAR &kp RPAR &kp LEFT>;
        };

        macro_brackets: macro_brackets {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp LBKT &kp RBKT &kp LEFT>;
        };

        macro_braces: macro_braces {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp LBRC &kp RBRC &kp LEFT>;
        };

        macro_angle: macro_angle {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp LT &kp GT &kp LEFT>;
        };

        macro_double_equal: macro_double_equal {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp EQUAL &kp EQUAL>;
        };

        macro_not_equal: macro_not_equal {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp EXCL &kp EQUAL>;
        };

        macro_arrow: macro_arrow {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp EQUAL &kp GT>;
        };

        macro_dunder: macro_dunder {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp UNDER &kp UNDER>;
        };

        macro_double_slash: macro_double_slash {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp FSLH &kp FSLH>;
        };
    };

    keymap {
        compatible = "zmk,keymap";

        // ================================================================
        // BASE - Your Colemak-DH (unchanged)
        // ================================================================
        base_layer {
            bindings = <
           &kp Q  &kp W           &kp F        &kp P        &kp G             &kp J                &kp L            &kp U          &kp Y            &kp SEMI
           &kp A  &hml LEFT_ALT R &hml LCTRL S &hml LSHFT T &hml LEFT_GUI D   &hmr RIGHT_COMMAND H &hmr RSHFT N     &hmr RCTRL E   &hmr RIGHT_ALT I &kp O
&kp ESC    &kp Z  &kp X           &kp C        &kp V        &kp B             &kp K                &kp M            &kp COMMA      &kp DOT          &kp FSLH  &kp TAB
                                  &mo NAV      &mo NUM      &kp BSPC          &kp SPACE            &mo SYM          &kp RET
            >;
        };

        // ================================================================
        // NUM - Optimized for fast number entry + calculator layout
        // ================================================================
        num_layer {
            bindings = <
           &kp N1     &kp N2     &kp N3     &kp N4     &kp N5            &kp N6     &kp N7     &kp N8     &kp N9     &kp N0
           &kp FSLH   &kp N7     &kp N8     &kp N9     &kp MINUS         &kp EQUAL  &kp N4     &kp N5     &kp N6     &kp PLUS
&trans     &kp STAR   &kp N1     &kp N2     &kp N3     &kp DOT           &kp N0     &kp N1     &kp N2     &kp N3     &kp DOT   &trans
                                 &trans     &trans                       &kp N0     &kp COMMA
            >;
        };

        // ================================================================
        // SYM - Optimized symbol placement (frequency-based)
        // ================================================================
        sym_layer {
            bindings = <
           &kp EXCL   &kp AT     &kp HASH   &kp DLLR   &kp PRCNT         &kp CARET  &kp AMPS   &kp STAR   &kp LPAR   &kp RPAR
           &kp EQUAL  &kp MINUS  &kp PLUS   &kp UNDER  &kp COLON         &kp PIPE   &kp LBRC   &kp RBRC   &kp LBKT   &kp RBKT
&trans     &kp GRAVE  &kp TILDE  &kp LT     &kp GT     &kp BSLH          &kp FSLH   &kp SQT    &kp DQT    &kp QMARK  &kp SEMI  &trans
                                 &kp F1     &kp F2                       &kp F3     &trans
            >;
        };

        // ================================================================
        // NAV - Smooth navigation with modifiers ready
        // ================================================================
        nav_layer {
            bindings = <
           &kp F1     &kp F2     &kp F3     &kp F4     &kp F5            &kp HOME   &kp PG_DN  &kp PG_UP  &kp END    &kp DEL
           &kp LGUI   &kp LALT   &kp LCTRL  &kp LSHFT  &kp F6            &kp LEFT   &kp DOWN   &kp UP     &kp RIGHT  &kp BSPC
&trans     &kp F7     &kp F8     &kp F9     &kp F10    &kp F11           &kp LC(LEFT) &kp LC(DOWN) &kp LC(UP) &kp LC(RIGHT) &kp INS &kp F12
                                 &trans     &trans                       &kp RET    &trans
            >;
        };

        // ================================================================
        // FUN - System controls (Bluetooth, media)
        // ================================================================
        fun_layer {
            bindings = <
           &none      &none      &none      &none      &none             &none      &none      &none      &none      &none
           &kp LGUI   &kp LALT   &kp LCTRL  &kp LSHFT  &none             &kp C_PREV &kp C_VOL_DN &kp C_VOL_UP &kp C_NEXT &none
&none      &bt BT_SEL 0 &bt BT_SEL 1 &bt BT_SEL 2 &bt BT_CLR &out OUT_USB &sys_reset &kp C_BRI_DN &kp C_BRI_UP &kp C_PP &bootloader &none
                                 &none      &none                        &none      &none
            >;
        };
    };

    conditional_layers {
        compatible = "zmk,conditional-layers";

        tri_layer {
            if-layers = <NUM SYM>;
            then-layer = <FUN>;
        };
    };
};
