/*
 * TOTEM 38-KEY OPTIMIZED FOR EASY TYPING
 * Enhanced ergonomics and reach optimization
 */

#include <behaviors.dtsi>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/outputs.h>

#define BASE 0
#define NAV  1
#define NUM  2
#define SYM  3
#define FN   4
#define SYS  5

// Key positions optimized for reach
#define KEYS_L 0 1 2 3 4 10 11 12 13 14 20 21 22 23 24
#define KEYS_R 5 6 7 8 9 15 16 17 18 19 25 26 27 28 29
#define THUMBS 30 31 32 33 34 35 36 37

// Optimized timing for easier typing
#define QUICK_TAP_MS 200      // Increased for easier double-taps
#define COMBO_TERM_FAST 30    // Slightly slower for accuracy
#define COMBO_TERM_SLOW 40    // More forgiving timing
#define COMBO_IDLE_FAST 100   // Reduced for faster typing

/ {
    behaviors {
        // More forgiving homerow mods
        hml: homerow_left {
            compatible = "zmk,behavior-hold-tap";
            label = "HOMEROW_LEFT";
            #binding-cells = <2>;
            flavor = "balanced";
            tapping-term-ms = <300>;    // Increased for easier activation
            quick-tap-ms = <200>;       // More forgiving
            require-prior-idle-ms = <120>; // Reduced for faster flow
            bindings = <&kp>, <&kp>;
            hold-trigger-key-positions = <KEYS_R THUMBS>;
            hold-trigger-on-release;
        };

        hmr: homerow_right {
            compatible = "zmk,behavior-hold-tap";
            label = "HOMEROW_RIGHT";
            #binding-cells = <2>;
            flavor = "balanced";
            tapping-term-ms = <300>;    // Increased for easier activation
            quick-tap-ms = <200>;       // More forgiving
            require-prior-idle-ms = <120>; // Reduced for faster flow
            bindings = <&kp>, <&kp>;
            hold-trigger-key-positions = <KEYS_L THUMBS>;
            hold-trigger-on-release;
        };

        // One-shot mods for easier modifier access
        osl_nav: one_shot_layer_nav {
            compatible = "zmk,behavior-hold-tap";
            label = "ONE_SHOT_LAYER_NAV";
            #binding-cells = <2>;
            flavor = "balanced";
            tapping-term-ms = <150>;
            quick-tap-ms = <125>;
            bindings = <&mo>, <&sl>;
        };

        // Thumb optimized layer access
        thumb_lt: thumb_layer_tap {
            compatible = "zmk,behavior-hold-tap";
            label = "THUMB_LAYER_TAP";
            #binding-cells = <2>;
            flavor = "tap-preferred";   // Easier to tap
            tapping-term-ms = <180>;    // Shorter for responsiveness
            quick-tap-ms = <150>;
            bindings = <&mo>, <&kp>;
        };

        // Smart space with auto-shift
        smart_space: smart_space {
            compatible = "zmk,behavior-mod-morph";
            label = "SMART_SPACE";
            #binding-cells = <0>;
            bindings = <&kp SPACE>, <&space_shift>;
            mods = <(MOD_LSFT|MOD_RSFT)>;
        };

        // Auto-capitalization helper
        space_shift: space_shift {
            compatible = "zmk,behavior-macro";
            label = "SPACE_SHIFT";
            #binding-cells = <0>;
            bindings = <&kp SPACE &sk LSHFT>;
            wait-ms = <0>;
            tap-ms = <5>;
        };

        // Easy access to symbols
        easy_sym: easy_symbols {
            compatible = "zmk,behavior-tap-dance";
            label = "EASY_SYMBOLS";
            #binding-cells = <0>;
            tapping-term-ms = <200>;
            bindings = <&kp SEMI>, <&kp COLON>;
        };

        // Programming helpers
        arrow_func: arrow_function {
            compatible = "zmk,behavior-macro";
            label = "ARROW_FUNCTION";
            #binding-cells = <0>;
            bindings = <&kp EQUAL &kp GT>;
            wait-ms = <0>;
            tap-ms = <5>;
        };

        // Common programming patterns
        console_log: console_log {
            compatible = "zmk,behavior-macro";
            label = "CONSOLE_LOG";
            #binding-cells = <0>;
            bindings = <&kp C &kp O &kp N &kp S &kp O &kp L &kp E &kp DOT &kp L &kp O &kp G &kp LPAR>;
            wait-ms = <5>;
            tap-ms = <10>;
        };

        // Auto-brackets
        auto_paren: auto_parentheses {
            compatible = "zmk,behavior-macro";
            label = "AUTO_PARENTHESES";
            #binding-cells = <0>;
            bindings = <&kp LPAR &kp RPAR &kp LEFT>;
            wait-ms = <0>;
            tap-ms = <5>;
        };

        auto_brace: auto_braces {
            compatible = "zmk,behavior-macro";
            label = "AUTO_BRACES";
            #binding-cells = <0>;
            bindings = <&kp LBRC &kp RET &kp RET &kp RBRC &kp UP>;
            wait-ms = <0>;
            tap-ms = <5>;
        };

        // Smart punctuation with easy reach
        comma_smart: comma_smart {
            compatible = "zmk,behavior-mod-morph";
            label = "COMMA_SMART";
            #binding-cells = <0>;
            bindings = <&kp COMMA>, <&kp SEMI>;
            mods = <(MOD_LSFT|MOD_RSFT)>;
        };

        dot_smart: dot_smart {
            compatible = "zmk,behavior-mod-morph";
            label = "DOT_SMART";
            #binding-cells = <0>;
            bindings = <&kp DOT>, <&kp COLON>;
            mods = <(MOD_LSFT|MOD_RSFT)>;
        };
    };

    macros {
        // Common code snippets
        if_stmt: if_statement {
            label = "IF_STATEMENT";
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp I &kp F &kp SPACE &kp LPAR>;
            wait-ms = <5>;
            tap-ms = <10>;
        };

        for_loop: for_loop {
            label = "FOR_LOOP";
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp F &kp O &kp R &kp SPACE &kp LPAR>;
            wait-ms = <5>;
            tap-ms = <10>;
        };

        // Quick terminal commands
        git_add: git_add {
            label = "GIT_ADD";
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp G &kp I &kp T &kp SPACE &kp A &kp D &kp D &kp SPACE>;
            wait-ms = <5>;
            tap-ms = <10>;
        };
    };

    combos {
        compatible = "zmk,combos";

        // Most used keys in easy positions
        combo_enter {
            key-positions = <17 18>;   // E I - Easy right hand reach
            bindings = <&kp RET>;
            timeout-ms = <COMBO_TERM_FAST>;
            require-prior-idle-ms = <COMBO_IDLE_FAST>;
        };

        combo_esc {
            key-positions = <1 2>;     // W F - Easy left hand reach
            bindings = <&kp ESC>;
            timeout-ms = <COMBO_TERM_FAST>;
            require-prior-idle-ms = <COMBO_IDLE_FAST>;
        };

        combo_tab {
            key-positions = <11 12>;   // R S - Close to home
            bindings = <&kp TAB>;
            timeout-ms = <COMBO_TERM_FAST>;
            require-prior-idle-ms = <COMBO_IDLE_FAST>;
        };

        combo_bspc {
            key-positions = <7 8>;     // U Y - Easy reach
            bindings = <&kp BSPC>;
            timeout-ms = <COMBO_TERM_FAST>;
            require-prior-idle-ms = <COMBO_IDLE_FAST>;
        };

        combo_del {
            key-positions = <8 9>;     // Y ' - Corner access
            bindings = <&kp DEL>;
            timeout-ms = <COMBO_TERM_FAST>;
            require-prior-idle-ms = <COMBO_IDLE_FAST>;
        };

        // Easy brackets - most used in programming
        combo_parens {
            key-positions = <15 16>;   // H N - Strong fingers
            bindings = <&auto_paren>;
            timeout-ms = <COMBO_TERM_FAST>;
            require-prior-idle-ms = <COMBO_IDLE_FAST>;
        };

        combo_braces {
            key-positions = <25 26>;   // K M - Lower row easy reach
            bindings = <&auto_brace>;
            timeout-ms = <COMBO_TERM_FAST>;
            require-prior-idle-ms = <COMBO_IDLE_FAST>;
        };

        combo_brackets {
            key-positions = <26 27>;   // M , - Adjacent keys
            bindings = <&kp LBKT>;
            timeout-ms = <COMBO_TERM_FAST>;
            require-prior-idle-ms = <COMBO_IDLE_FAST>;
        };

        combo_rbrackets {
            key-positions = <27 28>;   // , . - Adjacent keys
            bindings = <&kp RBKT>;
            timeout-ms = <COMBO_TERM_FAST>;
            require-prior-idle-ms = <COMBO_IDLE_FAST>;
        };

        // Programming symbols in easy reach
        combo_arrow {
            key-positions = <13 14>;   // T D - Arrow function =>
            bindings = <&arrow_func>;
            timeout-ms = <COMBO_TERM_FAST>;
            require-prior-idle-ms = <COMBO_IDLE_FAST>;
        };

        combo_equal {
            key-positions = <3 4>;     // P G - Top row easy
            bindings = <&kp EQUAL>;
            timeout-ms = <COMBO_TERM_FAST>;
            require-prior-idle-ms = <COMBO_IDLE_FAST>;
        };

        combo_dash {
            key-positions = <5 6>;     // J L - Right side easy
            bindings = <&kp MINUS>;
            timeout-ms = <COMBO_TERM_FAST>;
            require-prior-idle-ms = <COMBO_IDLE_FAST>;
        };

        combo_under {
            key-positions = <22 23>;   // C V - Lower left easy
            bindings = <&kp UNDER>;
            timeout-ms = <COMBO_TERM_FAST>;
            require-prior-idle-ms = <COMBO_IDLE_FAST>;
        };

        // Quick access to numbers (most used)
        combo_0 {
            key-positions = <10 19>;   // A O - Pinkies, easy reach
            bindings = <&kp N0>;
            timeout-ms = <COMBO_TERM_SLOW>;
        };

        combo_1 {
            key-positions = <20 21>;   // Z X - Corner, easy sequence
            bindings = <&kp N1>;
            timeout-ms = <COMBO_TERM_SLOW>;
        };

        // Essential symbols for programming
        combo_semicolon {
            key-positions = <18 19>;   // I O - Right side comfortable
            bindings = <&kp SEMI>;
            timeout-ms = <COMBO_TERM_FAST>;
        };

        combo_colon {
            key-positions = <16 17>;   // N E - Strong finger combo
            bindings = <&kp COLON>;
            timeout-ms = <COMBO_TERM_FAST>;
        };

        // Quick clipboard (common operations)
        combo_copy {
            key-positions = <21 22>;   // X C - Natural sequence
            bindings = <&kp LC(C)>;
            timeout-ms = <COMBO_TERM_FAST>;
        };

        combo_paste {
            key-positions = <22 23>;   // C V - Natural sequence
            bindings = <&kp LC(V)>;
            timeout-ms = <COMBO_TERM_FAST>;
        };

        combo_cut {
            key-positions = <20 22>;   // Z C - Skip over X
            bindings = <&kp LC(X)>;
            timeout-ms = <COMBO_TERM_FAST>;
        };

        combo_undo {
            key-positions = <20 21>;   // Z X - Corner combo
            bindings = <&kp LC(Z)>;
            timeout-ms = <COMBO_TERM_FAST>;
        };

        combo_save {
            key-positions = <12 23>;   // S V - Cross-hand save
            bindings = <&kp LC(S)>;
            timeout-ms = <COMBO_TERM_FAST>;
        };

        // Development shortcuts
        combo_console {
            key-positions = <11 22>;   // R C - Console.log macro
            bindings = <&console_log>;
            timeout-ms = <COMBO_TERM_SLOW>;
        };

        combo_git {
            key-positions = <4 24>;    // G B - Git operations
            bindings = <&git_add>;
            timeout-ms = <COMBO_TERM_SLOW>;
        };
    };

    keymap {
        compatible = "zmk,keymap";

        // BASE LAYER - Optimized for easy reach
        base_layer {
            label = "BASE";
            bindings = <
        // Optimized letter placement for programming and Arabic/English
             &kp Q         &kp W            &kp F         &kp P         &kp G              &kp J                 &kp L         &kp U         &kp Y             &kp SQT
        // Homerow mods on strongest fingers (index/middle)
             &kp A         &hml LALT R      &hml LCTRL S  &hml LSHFT T  &hml LGUI D        &hmr RGUI H           &hmr RSHFT N  &hmr RCTRL E  &hmr RALT I       &kp O
        // Easy reach bottom row
             &kp Z         &kp X            &kp C         &kp V         &kp B              &kp K                 &kp M         &comma_smart  &dot_smart        &kp FSLH
        // Thumbs optimized for most-used keys
                                            &osl_nav NAV 0 &kp BSPC     &thumb_lt FN TAB   &thumb_lt SYM ESC     &thumb_lt NUM 0 SPACE &sk LSHFT &kp DEL &kp RET
            >;
        };

        // NAVIGATION - Optimized for cursor movement
        nav_layer {
            label = "NAV";
            bindings = <
        // Window management on top row
             &kp LA(F4)    &kp LG(LC(LEFT)) &kp LG(UP)    &kp LG(LC(RIGHT)) &kp LG(LC(D))   &kp PG_UP             &kp HOME      &kp UP        &kp END           &kp INS
        // Modifiers for selection
             &sk LGUI      &sk LALT         &sk LSHFT     &sk LCTRL     &kp LG(D)          &kp PG_DN             &kp LEFT      &kp DOWN      &kp RIGHT         &kp RET
        // Quick actions
             &kp LC(Z)     &kp LC(X)        &kp LC(C)     &kp LC(V)     &kp LC(Y)          &kp CAPS              &kp LC(LEFT)  &kp LC(DOWN)  &kp LC(RIGHT)     &kp DEL
        // Easy navigation thumbs
                                            &trans        &trans        &trans             &trans                &trans        &trans        &trans            &trans
            >;
        };

        // NUMBERS - Calculator style layout
        num_layer {
            label = "NUM";
            bindings = <
        // Top row numbers (like keyboard number row)
             &kp N1        &kp N2           &kp N3        &kp N4        &kp N5             &kp N6                &kp N7        &kp N8        &kp N9            &kp N0
        // Calculator layout for easy math
             &kp PLUS      &kp N4           &kp N5        &kp N6        &kp STAR           &kp EQUAL             &kp N4        &kp N5        &kp N6            &kp MINUS
        // Bottom row with common operations
             &kp N0        &kp N1           &kp N2        &kp N3        &kp DOT            &kp COMMA             &kp N1        &kp N2        &kp N3            &kp FSLH
        // Math operations on thumbs
                                            &trans        &trans        &trans             &trans                &trans        &trans        &trans            &trans
            >;
        };

        // SYMBOLS - Optimized for programming
        sym_layer {
            label = "SYM";
            bindings = <
        // Most used programming symbols on top row
             &kp EXCL      &kp AT           &kp HASH      &kp DLLR      &kp PRCNT          &kp CARET             &kp AMPS      &kp STAR      &kp LPAR          &kp RPAR
        // Common operators in easy reach
             &kp GRAVE     &kp MINUS        &kp PLUS      &kp EQUAL     &kp COLON          &kp PIPE              &kp LBRC      &kp RBRC      &kp LBKT          &kp RBKT
        // Additional symbols
             &kp TILDE     &kp UNDER        &kp BSLH      &kp FSLH      &kp SEMI           &kp LT                &kp GT        &kp SQT       &kp DQT           &kp QMARK
        // Symbol shortcuts on thumbs
                                            &trans        &trans        &trans             &trans                &trans        &trans        &trans            &trans
            >;
        };

        // FUNCTION - Media and F-keys optimized
        fn_layer {
            label = "FN";
            bindings = <
        // F-keys in logical order
             &kp F1        &kp F2           &kp F3        &kp F4        &kp F5             &kp F6                &kp F7        &kp F8        &kp F9            &kp F10
        // Media controls on home row for easy access
             &kp C_MUTE    &kp C_VOL_DN     &kp C_VOL_UP  &kp C_PP      &kp C_NEXT         &kp C_BRI_DN          &kp C_BRI_UP  &trans        &trans            &kp F11
        // System controls
             &trans        &trans           &trans        &trans        &trans             &trans                &trans        &trans        &trans            &kp F12
        // Media on thumbs
                                            &trans        &trans        &trans             &trans                &trans        &trans        &trans            &trans
            >;
        };

        // SYSTEM - Bluetooth and settings
        sys_layer {
            label = "SYS";
            bindings = <
        // Bluetooth profiles in order
             &bt BT_SEL 0  &bt BT_SEL 1     &bt BT_SEL 2  &bt BT_SEL 3  &bt BT_SEL 4       &trans                &trans        &trans        &trans            &trans
        // Output selection
             &out OUT_USB  &out OUT_BLE     &trans        &trans        &bt BT_CLR         &trans                &trans        &trans        &trans            &trans
        // System controls
             &trans        &trans           &trans        &bootloader   &sys_reset         &sys_reset            &bootloader   &trans        &trans            &trans
        // System thumbs
                                            &trans        &trans        &trans             &trans                &trans        &trans        &trans            &trans
            >;
        };
    };

    // Smart layer activation
    conditional_layers {
        compatible = "zmk,conditional-layers";
        tri_layer {
            if-layers = <FN NUM>;
            then-layer = <SYS>;
        };
        sym_num_layer {
            if-layers = <SYM NUM>;
            then-layer = <SYS>;
        };
    };
};