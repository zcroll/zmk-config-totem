/*
 * TOTEM 38-KEY COMPLETE LAYOUT - FIXED
 * Proper 38-key count with all keys mapped
 */

#include <behaviors.dtsi>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/outputs.h>

#define BASE 0
#define NAV  1
#define NUM  2
#define SYM  3
#define FN   4
#define SYS  5

// Complete Totem 38-key positions
#define KEYS_L 0 1 2 3 4 10 11 12 13 14 20 21 22 23 24    // Left 15 keys
#define KEYS_R 5 6 7 8 9 15 16 17 18 19 25 26 27 28 29    // Right 15 keys
#define THUMBS 30 31 32 33 34 35 36 37                     // All 8 thumb positions for 38-key

#define QUICK_TAP_MS 175

/ {
    behaviors {
        // urob's "timeless" homerow mods
        hml: homerow_left {
            compatible = "zmk,behavior-hold-tap";
            label = "HOMEROW_LEFT";
            #binding-cells = <2>;
            flavor = "balanced";
            tapping-term-ms = <280>;
            quick-tap-ms = <QUICK_TAP_MS>;
            require-prior-idle-ms = <150>;
            bindings = <&kp>, <&kp>;
            hold-trigger-key-positions = <KEYS_R THUMBS>;
            hold-trigger-on-release;
        };

        hmr: homerow_right {
            compatible = "zmk,behavior-hold-tap";
            label = "HOMEROW_RIGHT";
            #binding-cells = <2>;
            flavor = "balanced";
            tapping-term-ms = <280>;
            quick-tap-ms = <QUICK_TAP_MS>;
            require-prior-idle-ms = <150>;
            bindings = <&kp>, <&kp>;
            hold-trigger-key-positions = <KEYS_L THUMBS>;
            hold-trigger-on-release;
        };

        // Layer-tap with smart space
        lt_spc: layer_tap_space {
            compatible = "zmk,behavior-hold-tap";
            label = "LAYER_TAP_SPACE";
            #binding-cells = <2>;
            flavor = "balanced";
            tapping-term-ms = <200>;
            quick-tap-ms = <QUICK_TAP_MS>;
            bindings = <&mo>, <&spc_morph>;
        };

        // Smart space behavior
        spc_morph: space_morph {
            compatible = "zmk,behavior-mod-morph";
            label = "SPACE_MORPH";
            #binding-cells = <0>;
            bindings = <&kp SPACE>, <&dot_spc>;
            mods = <(MOD_LSFT)>;
        };

        // Magic shift behavior
        magic_shift: magic_shift {
            compatible = "zmk,behavior-hold-tap";
            label = "MAGIC_SHIFT";
            #binding-cells = <2>;
            flavor = "balanced";
            tapping-term-ms = <200>;
            quick-tap-ms = <QUICK_TAP_MS>;
            bindings = <&kp>, <&magic_shift_tap>;
        };

        magic_shift_tap: magic_shift_tap {
            compatible = "zmk,behavior-mod-morph";
            label = "MAGIC_SHIFT_TAP";
            #binding-cells = <0>;
            bindings = <&shift_repeat>, <&caps_word>;
            mods = <(MOD_LSFT)>;
        };

        shift_repeat: shift_repeat {
            compatible = "zmk,behavior-mod-morph";
            label = "SHIFT_REPEAT";
            #binding-cells = <0>;
            bindings = <&sk LSHFT>, <&key_repeat>;
            mods = <(MOD_LSFT)>;
        };

        // Smart punctuation
        comma_morph: comma_morph {
            compatible = "zmk,behavior-mod-morph";
            label = "COMMA_MORPH";
            #binding-cells = <0>;
            bindings = <&kp COMMA>, <&comma_inner>;
            mods = <(MOD_LSFT|MOD_RSFT)>;
        };

        comma_inner: comma_inner {
            compatible = "zmk,behavior-mod-morph";
            label = "COMMA_INNER";
            #binding-cells = <0>;
            bindings = <&kp SEMICOLON>, <&kp LESS_THAN>;
            mods = <(MOD_LCTL|MOD_RCTL)>;
        };

        dot_morph: dot_morph {
            compatible = "zmk,behavior-mod-morph";
            label = "DOT_MORPH";
            #binding-cells = <0>;
            bindings = <&kp DOT>, <&dot_inner>;
            mods = <(MOD_LSFT|MOD_RSFT)>;
        };

        dot_inner: dot_inner {
            compatible = "zmk,behavior-mod-morph";
            label = "DOT_INNER";
            #binding-cells = <0>;
            bindings = <&kp COLON>, <&kp GREATER_THAN>;
            mods = <(MOD_LCTL|MOD_RCTL)>;
        };

        qexcl: question_exclamation {
            compatible = "zmk,behavior-mod-morph";
            label = "QUESTION_EXCLAMATION";
            #binding-cells = <0>;
            bindings = <&kp QMARK>, <&kp EXCL>;
            mods = <(MOD_LSFT|MOD_RSFT)>;
        };
    };

    macros {
        // Dot-space-shift macro
        dot_spc: dot_space_shift {
            label = "DOT_SPACE_SHIFT";
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp DOT &kp SPACE &sk LSHFT>;
            wait-ms = <0>;
            tap-ms = <5>;
        };
    };

    combos {
        compatible = "zmk,combos";

        // Essential combos
        combo_esc {
            key-positions = <2 3>;
            bindings = <&kp ESC>;
            timeout-ms = <50>;
        };

        combo_tab {
            key-positions = <12 13>;
            bindings = <&kp TAB>;
            timeout-ms = <50>;
        };

        // Brackets
        combo_lpar {
            key-positions = <16 17>;
            bindings = <&kp LPAR>;
            timeout-ms = <50>;
        };

        combo_rpar {
            key-positions = <17 18>;
            bindings = <&kp RPAR>;
            timeout-ms = <50>;
        };

        combo_lbkt {
            key-positions = <26 27>;
            bindings = <&kp LBKT>;
            timeout-ms = <50>;
        };

        combo_rbkt {
            key-positions = <27 28>;
            bindings = <&kp RBKT>;
            timeout-ms = <50>;
        };

        combo_lbrc {
            key-positions = <25 26>;
            bindings = <&kp LBRC>;
            timeout-ms = <50>;
        };

        combo_rbrc {
            key-positions = <28 29>;
            bindings = <&kp RBRC>;
            timeout-ms = <50>;
        };

        // Clipboard
        combo_copy {
            key-positions = <21 22>;
            bindings = <&kp LC(C)>;
            timeout-ms = <50>;
        };

        combo_paste {
            key-positions = <22 23>;
            bindings = <&kp LC(V)>;
            timeout-ms = <50>;
        };

        combo_cut {
            key-positions = <21 23>;
            bindings = <&kp LC(X)>;
            timeout-ms = <50>;
        };
    };

    keymap {
        compatible = "zmk,keymap";

        // BASE LAYER - All 38 keys properly mapped
        base_layer {
            label = "BASE";
            bindings = <
        // Row 1: 10 keys (0-9)
             &kp Q         &kp W            &kp F         &kp P         &kp G              &kp J                 &kp L         &kp U         &kp Y             &kp SQT
        // Row 2: 10 keys (10-19)
             &kp A         &hml LALT R      &hml LCTRL S  &hml LSHFT T  &hml LGUI D        &hmr LGUI H           &hmr RSHFT N  &hmr RCTRL E  &hmr LALT I       &kp O
        // Row 3: 10 keys (20-29)
             &kp Z         &kp X            &kp C         &kp V         &kp B              &kp K                 &kp M         &comma_morph  &dot_morph        &qexcl
        // Thumbs: 8 keys (30-37) for 38-key total
                                            &mo NAV       &kp BSPC      &mo FN             &mo SYM               &lt_spc NUM 0 &magic_shift LSHFT 0 &kp DEL &kp RET
            >;
        };

        // NAVIGATION LAYER
        nav_layer {
            label = "NAV";
            bindings = <
             &kp LA(F4)    &trans           &kp LS(TAB)   &kp TAB       &trans             &kp PG_UP             &kp HOME      &kp UP        &kp END           &kp INS
             &sk LGUI      &sk LALT         &sk LSHFT     &sk LCTRL     &trans             &kp PG_DN             &kp LEFT      &kp DOWN      &kp RIGHT         &kp RET
             &trans        &trans           &trans        &trans        &trans             &kp CAPS              &kp LC(LEFT)  &kp LC(DOWN)  &kp LC(RIGHT)     &kp DEL
                                            &trans        &trans        &trans             &trans                &trans        &kp K_CANCEL  &trans            &trans
            >;
        };

        // NUMBER LAYER
        num_layer {
            label = "NUM";
            bindings = <
             &trans        &kp N7           &kp N8        &kp N9        &trans             &trans                &trans        &trans        &trans            &trans
             &hml LGUI N0  &hml LALT N4     &hml LCTRL N5 &hml LSHFT N6 &trans             &trans                &trans        &trans        &trans            &trans
             &trans        &kp N1           &kp N2        &kp N3        &trans             &trans                &trans        &trans        &trans            &trans
                                            &trans        &trans        &trans             &trans                &trans        &trans        &trans            &trans
            >;
        };

        // SYMBOL LAYER
        sym_layer {
            label = "SYM";
            bindings = <
             &kp EXCL      &kp AT           &kp HASH      &kp DLLR      &kp PRCNT          &kp CARET             &kp AMPS      &kp STAR      &kp LPAR          &kp RPAR
             &kp GRAVE     &kp MINUS        &kp PLUS      &kp EQUAL     &kp COLON          &kp PIPE              &kp LBRC      &kp RBRC      &kp LBKT          &kp RBKT
             &kp TILDE     &kp UNDER        &kp BSLH      &kp FSLH      &kp SEMI           &kp LT                &kp GT        &kp SQT       &kp DQT           &kp QMARK
                                            &trans        &trans        &trans             &trans                &trans        &trans        &trans            &trans
            >;
        };

        // FUNCTION LAYER
        fn_layer {
            label = "FN";
            bindings = <
             &kp F12       &kp F7           &kp F8        &kp F9        &trans             &trans                &kp C_PREV    &kp C_VOL_UP  &kp C_NEXT        &trans
             &hml LGUI F11 &hml LALT F4     &hml LCTRL F5 &hml LSHFT F6 &trans             &trans                &trans        &kp C_VOL_DN  &trans            &trans
             &kp F10       &kp F1           &kp F2        &kp F3        &trans             &trans                &trans        &trans        &trans            &trans
                                            &trans        &trans        &trans             &trans                &kp C_MUTE    &kp C_PP      &trans            &trans
            >;
        };

        // SYSTEM LAYER
        sys_layer {
            label = "SYS";
            bindings = <
             &bt BT_SEL 0  &bt BT_SEL 1     &bt BT_SEL 2  &bt BT_SEL 3  &bt BT_CLR         &trans                &trans        &trans        &trans            &trans
             &out OUT_USB  &out OUT_BLE     &trans        &trans        &trans             &trans                &trans        &trans        &trans            &trans
             &trans        &trans           &trans        &bootloader   &sys_reset         &sys_reset            &bootloader   &trans        &trans            &trans
                                            &trans        &trans        &trans             &trans                &trans        &trans        &trans            &trans
            >;
        };
    };

    // Conditional layers
    conditional_layers {
        compatible = "zmk,conditional-layers";
        tri_layer {
            if-layers = <FN NUM>;
            then-layer = <SYS>;
        };
    };
};
