/*
 * Totem Keyboard - Optimized for Python/LazyVim with Colemak-DH
 * Full 38-key layout with all thumb keys
 */

#include <behaviors.dtsi>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/outputs.h>

// Layer definitions
#define BASE 0
#define SYM  1
#define NUM  2
#define NAV  3
#define FUN  4

// Key position labels for 38-key Totem
//  0  1  2  3  4  5             6  7  8  9 10 11
// 12 13 14 15 16 17            18 19 20 21 22 23
// 24 25 26 27 28 29            30 31 32 33 34 35
//             36 37            38 39

// Left hand keys
#define KEYS_L  0  1  2  3  4  5 12 13 14 15 16 17 24 25 26 27 28 29
// Right hand keys  
#define KEYS_R  6  7  8  9 10 11 18 19 20 21 22 23 30 31 32 33 34 35
// Thumb keys
#define THUMBS 36 37 38 39

&lt {
    tapping-term-ms = <200>;
    quick-tap-ms = <150>;
    flavor = "balanced";
};

/ {
    behaviors {
        // Home row mods - left hand  
        hml: home_row_mod_left {
            compatible = "zmk,behavior-hold-tap";
            #binding-cells = <2>;
            flavor = "balanced";
            tapping-term-ms = <280>;
            quick-tap-ms = <175>;
            require-prior-idle-ms = <150>;
            bindings = <&kp>, <&kp>;
            hold-trigger-key-positions = <KEYS_R THUMBS>;
            hold-trigger-on-release;
        };

        // Home row mods - right hand
        hmr: home_row_mod_right {
            compatible = "zmk,behavior-hold-tap";
            #binding-cells = <2>;
            flavor = "balanced";
            tapping-term-ms = <280>;
            quick-tap-ms = <175>;
            require-prior-idle-ms = <150>;
            bindings = <&kp>, <&kp>;
            hold-trigger-key-positions = <KEYS_L THUMBS>;
            hold-trigger-on-release;
        };

        // Layer-tap behaviors for thumb keys
        lt_spc: layer_tap_space {
            compatible = "zmk,behavior-hold-tap";
            #binding-cells = <2>;
            flavor = "balanced";
            tapping-term-ms = <200>;
            quick-tap-ms = <150>;
            bindings = <&mo>, <&kp>;
        };

        lt_bspc: layer_tap_backspace {
            compatible = "zmk,behavior-hold-tap";
            #binding-cells = <2>;
            flavor = "balanced";
            tapping-term-ms = <200>;
            quick-tap-ms = <150>;
            bindings = <&mo>, <&kp>;
        };

        lt_tab: layer_tap_tab {
            compatible = "zmk,behavior-hold-tap";
            #binding-cells = <2>;
            flavor = "balanced";
            tapping-term-ms = <200>;
            quick-tap-ms = <150>;
            bindings = <&mo>, <&kp>;
        };

        lt_ent: layer_tap_enter {
            compatible = "zmk,behavior-hold-tap";
            #binding-cells = <2>;
            flavor = "balanced";
            tapping-term-ms = <200>;
            quick-tap-ms = <150>;
            bindings = <&mo>, <&kp>;
        };

        // Smart shift with caps word
        smart_shft: smart_shift {
            compatible = "zmk,behavior-mod-morph";
            #binding-cells = <0>;
            bindings = <&sk LSHFT>, <&caps_word>;
            mods = <(MOD_LSFT)>;
        };

        // Mod-tap for ctrl/esc
        mt_esc: mod_tap_esc {
            compatible = "zmk,behavior-hold-tap";
            #binding-cells = <2>;
            flavor = "balanced";
            tapping-term-ms = <200>;
            bindings = <&kp>, <&kp>;
        };
    };

    combos {
        compatible = "zmk,combos";
        
        // Bracket combos for Python
        combo_lpar {
            timeout-ms = <50>;
            key-positions = <15 16>;
            bindings = <&kp LPAR>;
            layers = <BASE>;
            require-prior-idle-ms = <150>;
        };
        
        combo_rpar {
            timeout-ms = <50>;
            key-positions = <19 20>;
            bindings = <&kp RPAR>;
            layers = <BASE>;
            require-prior-idle-ms = <150>;
        };
        
        combo_lbkt {
            timeout-ms = <50>;
            key-positions = <14 15>;
            bindings = <&kp LBKT>;
            layers = <BASE>;
            require-prior-idle-ms = <150>;
        };
        
        combo_rbkt {
            timeout-ms = <50>;
            key-positions = <20 21>;
            bindings = <&kp RBKT>;
            layers = <BASE>;
            require-prior-idle-ms = <150>;
        };
        
        combo_lbrc {
            timeout-ms = <50>;
            key-positions = <26 27>;
            bindings = <&kp LBRC>;
            layers = <BASE>;
            require-prior-idle-ms = <150>;
        };
        
        combo_rbrc {
            timeout-ms = <50>;
            key-positions = <31 32>;
            bindings = <&kp RBRC>;
            layers = <BASE>;
            require-prior-idle-ms = <150>;
        };

        // ESC combo
        combo_esc {
            timeout-ms = <50>;
            key-positions = <1 2>;
            bindings = <&kp ESC>;
            layers = <BASE>;
            require-prior-idle-ms = <150>;
        };

        // Python double underscore __
        combo_underscore_double {
            timeout-ms = <50>;
            key-positions = <25 26>;
            bindings = <&macro_underscore_double>;
            layers = <BASE>;
            require-prior-idle-ms = <150>;
        };

        // Caps word
        combo_caps_word {
            timeout-ms = <50>;
            key-positions = <15 20>;  // Home row index fingers
            bindings = <&caps_word>;
            layers = <BASE>;
        };

        // Function layer
        combo_fun {
            timeout-ms = <50>;
            key-positions = <36 39>;
            bindings = <&mo FUN>;
            layers = <BASE>;
        };
    };

    macros {
        // Macro for double underscore (Python __init__, __main__, etc.)
        macro_underscore_double: macro_underscore_double {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp UNDER &kp UNDER>;
        };
    };

    keymap {
        compatible = "zmk,keymap";

        // Layer 0: Colemak-DH Base
        base_layer {
            display-name = "Base";
            bindings = <
                &kp TAB         &kp Q           &kp W           &kp F           &kp P           &kp B               &kp J           &kp L           &kp U           &kp Y           &kp SEMI        &kp BSLH
                &mt_esc LCTRL ESC  &hml LGUI A  &hml LALT R     &hml LSHFT S    &hml LCTRL T    &kp G               &kp M           &hmr RCTRL N    &hmr RSHFT E    &hmr LALT I     &hmr RGUI O     &kp SQT
                &kp LSHFT       &kp Z           &kp X           &kp C           &kp D           &kp V               &kp K           &kp H           &kp COMMA       &kp DOT         &kp FSLH        &kp RSHFT
                                                                &lt_tab NAV TAB    &lt_spc SYM SPACE                &lt_bspc NUM BSPC   &lt_ent FUN RET
            >;
        };

        // Layer 1: Symbol Layer (Python-optimized)
        symbol_layer {
            display-name = "Symbol";
            bindings = <
                &trans          &kp EXCL        &kp AT          &kp LBRC        &kp RBRC        &kp PIPE            &kp AMPS        &kp STAR        &kp LPAR        &kp RPAR        &kp BSLH        &kp GRAVE
                &trans          &kp HASH        &kp SQT         &kp DQT         &kp MINUS       &kp COLON           &kp EQUAL       &kp COLON       &kp LBKT        &kp RBKT        &kp PLUS        &kp TILDE
                &trans          &kp DLLR        &kp PRCNT       &kp CARET       &kp UNDER       &kp PLUS            &kp LT          &kp GT          &kp QMARK       &kp EXCL        &kp PIPE        &trans
                                                                &trans          &trans                              &kp DEL         &trans
            >;
        };

        // Layer 2: Number Layer
        number_layer {
            display-name = "Number";
            bindings = <
                &trans          &kp N1          &kp N2          &kp N3          &kp N4          &kp N5              &kp N6          &kp N7          &kp N8          &kp N9          &kp N0          &trans
                &trans          &kp LCTRL       &kp LALT        &kp LSHFT       &kp LGUI        &kp EQUAL           &kp PLUS        &kp N4          &kp N5          &kp N6          &kp MINUS       &kp DOT
                &trans          &trans          &trans          &trans          &kp COMMA       &kp STAR            &kp FSLH        &kp N1          &kp N2          &kp N3          &kp DOT         &trans
                                                                &kp N0          &kp SPACE                           &trans          &kp N0
            >;
        };

        // Layer 3: Navigation Layer (LazyVim)
        navigation_layer {
            display-name = "Nav";
            bindings = <
                &trans          &kp ESC         &trans          &trans          &trans          &trans              &kp PG_UP       &kp HOME        &kp UP          &kp END         &kp DEL         &trans
                &trans          &kp LCTRL       &kp LALT        &kp LSHFT       &kp LGUI        &trans              &kp PG_DN       &kp LEFT        &kp DOWN        &kp RIGHT       &kp RET         &trans
                &trans          &kp LC(Z)       &kp LC(X)       &kp LC(C)       &kp LC(V)       &trans              &trans          &kp LC(LEFT)    &trans          &kp LC(RIGHT)   &kp BSPC        &trans
                                                                &trans          &trans                              &kp RET         &kp DEL
            >;
        };

        // Layer 4: Function & System Layer
        function_layer {
            display-name = "Function";
            bindings = <
                &trans          &kp F1          &kp F2          &kp F3          &kp F4          &kp F5              &kp F6          &kp F7          &kp F8          &kp F9          &kp F10         &trans
                &trans          &bt BT_SEL 0    &bt BT_SEL 1    &bt BT_SEL 2    &bt BT_SEL 3    &bt BT_CLR          &kp C_PREV      &kp C_VOL_DN    &kp C_VOL_UP    &kp C_NEXT      &kp F11         &kp F12
                &trans          &out OUT_USB    &out OUT_BLE    &trans          &trans          &sys_reset          &sys_reset      &kp C_BRI_DN    &kp C_BRI_UP    &kp C_PP        &bootloader     &trans
                                                                &trans          &trans                              &trans          &trans
            >;
        };
    };
};
